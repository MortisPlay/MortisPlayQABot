import json
import logging
import os
import time
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.helpers import escape_markdown
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from dotenv import load_dotenv
from flask import Flask, request
from hypercorn.config import Config
from hypercorn.asyncio import serve

# Flask –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
flask_app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (stdout + —Ñ–∞–π–ª)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ stdout –¥–ª—è Railway
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 335236137
QUESTIONS_FILE = "questions.json"
BLACKLIST_FILE = "blacklist.json"
QA_WEBSITE = "https://mortisplay.ru/qa.html"
WEBHOOK_URL = "https://mortisplayqabot-production.up.railway.app/webhook"

# –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_TRANSLATIONS = {
    "pending": "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è",
    "approved": "–ü—Ä–∏–Ω—è—Ç",
    "rejected": "–û—Ç–∫–ª–æ–Ω—ë–Ω"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
if not os.path.exists(QUESTIONS_FILE):
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump({"questions": []}, f, ensure_ascii=False, indent=2)

if not os.path.exists(BLACKLIST_FILE):
    with open(BLACKLIST_FILE, "w", encoding="utf-8") as f:
        json.dump({"blacklist": []}, f, ensure_ascii=False, indent=2)

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
spam_protection = {}
processed_updates = set()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Application
app = None

def check_blacklist(question: str) -> bool:
    try:
        with open(BLACKLIST_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        blacklist = data.get("blacklist", [])
        question_lower = question.lower()
        for word in blacklist:
            if word.lower() in question_lower:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '{word}' –≤ –≤–æ–ø—Ä–æ—Å–µ: {question}")
                return True
        return False
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {BLACKLIST_FILE}: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üî•", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üò∏", callback_data="myquestions")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòé –≠—Ç–æ *Q&A-–±–æ—Ç Mortis Play*! –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤ –∏ —Å–∞–π—Ç–∞! üî• –ü–∏—à–∏ `/ask` –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üî•", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üò∏", callback_data="myquestions")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòé –Ø –±–æ—Ç Mortis Play, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∞–π—Ç–∞!\n\n"
        "*–ß—Ç–æ —è —É–º–µ—é:*\n"
        "- `/start` ‚Äî –ù–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π! üò∏\n"
        "- `/ask <–≤–æ–ø—Ä–æ—Å>` ‚Äî –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
        "- `/myquestions` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å üò∫\n"
        "- `/help` ‚Äî –ü–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ üï∂\n"
        "- `/list` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "- `/clear` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "- `/delete <id>` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, —É–¥–∞–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ ID\n"
        "- `/edit <id> <–Ω–æ–≤—ã–π_–≤–æ–ø—Ä–æ—Å>` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ ID\n\n"
        "–ü–∏—à–∏ `/ask` –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def list_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /list –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /list –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    if not data.get("questions"):
        await update.message.reply_text("–ü–æ–∫–∞ *–Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤*! üòø", parse_mode="Markdown")
        logger.info("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç")
        return
    response = "*–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤*:\n"
    for q in data["questions"]:
        status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
        response += f"ID: `{q['id']}`, –û—Ç: @{q['username']}, –í–æ–ø—Ä–æ—Å: *{q['question']}*, –°—Ç–∞—Ç—É—Å: `{status}`\n"
    await update.message.reply_text(response, parse_mode="Markdown")
    logger.info(f"–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(data['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤")

async def my_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /myquestions –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    user_questions = [q for q in data["questions"] if q["user_id"] == user_id]
    if not user_questions:
        await update.message.reply_text("–¢—ã –µ—â—ë *–Ω–µ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å*! üòø –ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>`", parse_mode="Markdown")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return
    response = "*–¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã*:\n"
    for q in user_questions:
        status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
        answer = f", –û—Ç–≤–µ—Ç: *{q['answer']}*" if q["status"] == "approved" and "answer" in q else ""
        response += f"ID: `{q['id']}`, –í–æ–ø—Ä–æ—Å: *{q['question']}*, –°—Ç–∞—Ç—É—Å: `{status}`{answer}\n"
    await update.message.reply_text(response, parse_mode="Markdown")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: {len(user_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /ask –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user = update.message.from_user
    user_id = user.id
    question = " ".join(context.args) if context.args else update.message.text

    current_time = time.time()
    if user_id in spam_protection:
        last_ask_time = spam_protection[user_id]["last_ask_time"]
        last_question = spam_protection[user_id]["last_question"]
        if current_time - last_ask_time < 60:
            await update.message.reply_text("–ô–æ—É, *–Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ*! üòé –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É!", parse_mode="Markdown")
            logger.info(f"–°–ø–∞–º-–∞—Ç–∞–∫–∞ –æ—Ç user_id {user_id}: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
            return
        if question == last_question:
            await update.message.reply_text("–≠–π, —Ç—ã *—É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª* —ç—Ç–æ! üòï –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.", parse_mode="Markdown")
            logger.info(f"–î—É–±–ª–∏–∫–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {user_id}: {question}")
            return

    if not context.args and update.message.text.startswith("/ask"):
        await update.message.reply_text(
            "–ô–æ—É, –Ω–∞–ø–∏—à–∏ *–≤–æ–ø—Ä–æ—Å* –ø–æ—Å–ª–µ `/ask`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`",
            parse_mode="Markdown"
        )
        return

    if len(question) < 5 or len(question) > 500:
        await update.message.reply_text(
            "–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç *5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤*! üòé",
            parse_mode="Markdown"
        )
        logger.info(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {user_id}: {len(question)} —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if check_blacklist(question):
        await update.message.reply_text(
            "–ô–æ—É, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç *–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞*! üòø –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏–∑-–∑–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {question}")
        return

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    question_id = len(data["questions"]) + 1
    data["questions"].append({
        "id": question_id,
        "user_id": user_id,
        "username": user.username or "–ê–Ω–æ–Ω–∏–º",
        "question": question,
        "status": "pending",
        "notify": False
    })

    try:
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    spam_protection[user_id] = {"last_ask_time": current_time, "last_question": question}

    keyboard = [[InlineKeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ üîî", callback_data=f"notify_{question_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!** –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ *—Å–∞–π—Ç–µ*! üò∏ *–î–æ–≥–µ –æ–¥–æ–±—Ä—è–µ—Ç* üê∂\n\n"
        "*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∞–π—Ç –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 1 –¥–æ 48 —á–∞—Å–æ–≤.* –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –ø–∏—à–∏ –≤ –ª–∏—á–∫—É *@dimap7221*! üòé",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    escaped_question = escape_markdown(question, version=2)
    escaped_username = escape_markdown(user.username or "–ê–Ω–æ–Ω–∏–º", version=2)
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"*–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å* \\(ID: `{question_id}`\\)\n–û—Ç: @{escaped_username}\n–í–æ–ø—Ä–æ—Å: *{escaped_question}*\n`/approve {question_id} <–æ—Ç–≤–µ—Ç>` ‚Äî –ø—Ä–∏–Ω—è—Ç—å\n`/reject {question_id}` ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç @{user.username or '–ê–Ω–æ–Ω–∏–º'}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"*–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å* (ID: {question_id})\n–û—Ç: @{user.username or '–ê–Ω–æ–Ω–∏–º'}\n–í–æ–ø—Ä–æ—Å: {question}\n`/approve {question_id} <–æ—Ç–≤–µ—Ç>` ‚Äî –ø—Ä–∏–Ω—è—Ç—å\n`/reject {question_id}` ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
            parse_mode=None
        )

async def notify_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Callback notify –æ—Ç user_id {update.effective_user.id}")
    query = update.callback_query
    await query.answer()
    question_id = int(query.data.split("_")[1])
    user_id = query.from_user.id

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    for q in data["questions"]:
        if q["id"] == question_id and q["user_id"] == user_id:
            q["notify"] = True
            break
    else:
        await query.message.reply_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! üòø", parse_mode="Markdown")
        logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è user_id {user_id}")
        return

    try:
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    await query.message.edit_text(
        "**–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!** –¢—ã –±—É–¥–µ—à—å *—É–≤–µ–¥–æ–º–ª—ë–Ω* –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ! üòé",
        parse_mode="Markdown"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /approve –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /approve –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /approve –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞* –∏ *–æ—Ç–≤–µ—Ç*: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        answer = " ".join(args[1:]) if len(args) > 1 else None
        if not answer:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏ *–æ—Ç–≤–µ—Ç* –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
                parse_mode="Markdown"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
            return

        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and q["status"] == "pending":
                q["status"] = "approved"
                q["answer"] = answer
                website_button = [[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ üåê", url=QA_WEBSITE)]]
                reply_markup = InlineKeyboardMarkup(website_button)
                if q["notify"]:
                    try:
                        escaped_answer = escape_markdown(answer, version=2)
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"*–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üòé –û—Ç–≤–µ—Ç: *{escaped_answer}*\n–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∞–π—Ç–µ!",
                            reply_markup=reply_markup,
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"**–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!** üòé –û—Ç–≤–µ—Ç: {answer}\n–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∞–π—Ç–µ!",
                            reply_markup=reply_markup,
                            parse_mode=None
                        )
                break
        else:
            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω* –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        website_button = [[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ üåê", url=QA_WEBSITE)]]
        reply_markup = InlineKeyboardMarkup(website_button)
        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å `{question_id}` *–ø—Ä–∏–Ω—è—Ç* —Å –æ—Ç–≤–µ—Ç–æ–º: *{answer}* üî•",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –ø—Ä–∏–Ω—è—Ç —Å –æ—Ç–≤–µ—Ç–æ–º: {answer}")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reject –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /reject –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reject –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞*: `/reject <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and q["status"] == "pending":
                q["status"] = "rejected"
                if q["notify"]:
                    try:
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text="–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å *–æ—Ç–∫–ª–æ–Ω—ë–Ω* üòï –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π!",
                            parse_mode="Markdown"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                break
        else:
            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω* –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å `{question_id}` *–æ—Ç–∫–ª–æ–Ω—ë–Ω* üòø",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/reject <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /clear –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /clear –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info("–ö–æ–º–∞–Ω–¥–∞ /clear –æ—Ç –∞–¥–º–∏–Ω–∞: –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    try:
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump({"questions": []}, f, ensure_ascii=False, indent=2)
        await update.message.reply_text(
            "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã *–æ—á–∏—â–µ–Ω—ã*! üò∫ ID –Ω–∞—á–Ω—ë—Ç—Å—è —Å 1.",
            parse_mode="Markdown"
        )
        logger.info("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /delete –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /delete –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /delete –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞*: `/delete <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /delete: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        initial_length = len(data["questions"])
        data["questions"] = [q for q in data["questions"] if q["id"] != question_id]
        if len(data["questions"]) == initial_length:
            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*! üòø",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å `{question_id}` *—É–¥–∞–ª—ë–Ω*!",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/delete <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /delete: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /edit –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞* –∏ *–Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å*: `/edit <id> <–Ω–æ–≤—ã–π_–≤–æ–ø—Ä–æ—Å>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        new_question = " ".join(args[1:])
        if len(new_question) < 5 or len(new_question) > 500:
            await update.message.reply_text(
                "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç *5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤*! üòé",
                parse_mode="Markdown"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
            return

        if check_blacklist(new_question):
            await update.message.reply_text(
                "–ô–æ—É, –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç *–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞*! üòø –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.",
                parse_mode="Markdown"
            )
            logger.info(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏–∑-–∑–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {new_question}")
            return

        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id:
                old_question = q["question"]
                q["question"] = new_question
                try:
                    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                except IOError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
                    await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
                    return
                await update.message.reply_text(
                    f"–í–æ–ø—Ä–æ—Å `{question_id}` *–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω*! üò∫\n–°—Ç–∞—Ä—ã–π: *{old_question}*\n–ù–æ–≤—ã–π: *{new_question}*",
                    parse_mode="Markdown"
                )
                logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω: —Å—Ç–∞—Ä—ã–π: {old_question}, –Ω–æ–≤—ã–π: {new_question}")
                return

        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*! üòø",
            parse_mode="Markdown"
        )
        logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/edit <id> <–Ω–æ–≤—ã–π_–≤–æ–ø—Ä–æ—Å>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {update.effective_user.id}: {update.message.text}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ, —É–¥–∞–ª—ë–Ω–Ω–æ–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    if update.message.from_user.id == ADMIN_ID:
        await update.message.reply_text(
            "–ô–æ—É, *–∞–¥–º–∏–Ω*! –ò—Å–ø–æ–ª—å–∑—É–π `/approve`, `/reject`, `/list`, `/clear`, `/delete`, `/edit` –∏–ª–∏ `/ask` –¥–ª—è —Ç–µ—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ üòé",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "–ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>`, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å *—ç–ø–∏—á–Ω—ã–π* –≤–æ–ø—Ä–æ—Å! üòé",
            parse_mode="Markdown"
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Callback button –æ—Ç user_id {update.effective_user.id}: {update.callback_query.data}")
    query = update.callback_query
    await query.answer()
    if query.data == "ask":
        await query.message.reply_text(
            "–ô–æ—É, –Ω–∞–ø–∏—à–∏ `/ask <—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å>`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`",
            parse_mode="Markdown"
        )
    elif query.data == "myquestions":
        user_id = query.from_user.id
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        user_questions = [q for q in data["questions"] if q["user_id"] == user_id]
        if not user_questions:
            await query.message.reply_text(
                "–¢—ã –µ—â—ë *–Ω–µ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤*! üòø –ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>`",
                parse_mode="Markdown"
            )
            return
        response = "*–¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã*:\n"
        for q in user_questions:
            status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
            answer = f", –û—Ç–≤–µ—Ç: *{q['answer']}*" if q["status"] == "approved" and "answer" in q else ""
            response += f"ID: `{q['id']}`, –í–æ–ø—Ä–æ—Å: *{q['question']}*, –°—Ç–∞—Ç—É—Å: `{status}`{answer}\n"
        await query.message.reply_text(response, parse_mode="Markdown")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"*–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ*! üòø: {context.error}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")

async def notify_admin_on_start(app: Application):
    try:
        await app.bot.send_message(
            chat_id=ADMIN_ID,
            text="**–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ Railway!** üòé *–ö–æ—Ç –æ–¥–æ–±—Ä—è–µ—Ç* üêæ",
            parse_mode="Markdown"
        )
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

@flask_app.route("/", methods=["GET"])
async def health_check():
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /: headers={request.headers}")
    return "Bot is running!", 200

@flask_app.route("/webhook", methods=["POST", "GET"])
async def webhook():
    global app
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±—Ö—É–∫: –º–µ—Ç–æ–¥={request.method}, url={request.url}, headers={request.headers}")
    if not app:
        logger.error("Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return "Application not initialized", 500
    if request.method == "GET":
        logger.info("GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±—Ö—É–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return "OK", 200
    try:
        json_data = request.get_json(force=True)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {json_data}")
        if not json_data or 'update_id' not in json_data:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤–µ–±—Ö—É–∫–∞")
            return "Invalid webhook JSON", 400
        if 'message' in json_data and 'date' not in json_data['message']:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'date' –≤ message")
            return "Missing 'date' in message", 400
        update = Update.de_json(json_data, app.bot)
        if not update:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return "Empty update", 400
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: update_id={update.update_id}, type={type(update)}")
        await app.process_update(update)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.update_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return "OK", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {str(e)}")
        return f"Error processing webhook: {str(e)}", 500

async def main_async():
    global app
    logger.info(f"–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª —Å Python {os.sys.version}")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω: {TOKEN[:10]}...{TOKEN[-10:]}")
    try:
        app = Application.builder().token(TOKEN).updater(None).build()
        await app.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
        logger.info("Application —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        if "InvalidToken" in str(e) or "401" in str(e):
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å TELEGRAM_TOKEN –≤ .env –∏–ª–∏ @BotFather.")
        raise
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_questions))
    app.add_handler(CommandHandler("myquestions", my_questions))
    app.add_handler(CommandHandler("ask", ask))
    app.add_handler(CommandHandler("approve", approve))
    app.add_handler(CommandHandler("reject", reject))
    app.add_handler(CommandHandler("clear", clear))
    app.add_handler(CommandHandler("delete", delete))
    app.add_handler(CommandHandler("edit", edit))
    app.add_handler(CallbackQueryHandler(notify_callback, pattern="^notify_"))
    app.add_handler(CallbackQueryHandler(button_callback, pattern="^(ask|myquestions)$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, lambda u, c: None))
    app.add_error_handler(error_handler)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await notify_admin_on_start(app)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Hypercorn —Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv("PORT", 8080))
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É {port} —Å Hypercorn")
    config = Config()
    config.bind = [f"0.0.0.0:{port}"]
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    server_task = asyncio.create_task(serve(flask_app, config))
    
    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è)
    try:
        await server_task
    except asyncio.CancelledError:
        logger.info("–°–µ—Ä–≤–µ—Ä Hypercorn –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await app.shutdown()

if __name__ == "__main__":
    asyncio.run(main_async())