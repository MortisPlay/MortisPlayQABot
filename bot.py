import json
import logging
import os
import time
import asyncio
import hashlib
import re
import difflib
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(".env")
TOKEN = os.getenv("TELEGRAM_TOKEN")
QUESTIONS_FILE = os.getenv("QUESTIONS_FILE", "questions.json")
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 335236137
BLACKLIST_FILE = "blacklist.json"
QA_WEBSITE = "https://mortisplay.ru/qa.html"
MAX_PENDING_QUESTIONS = 3
SIMILARITY_THRESHOLD = 0.8  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤

# –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_TRANSLATIONS = {
    "pending": "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è",
    "approved": "–ü—Ä–∏–Ω—è—Ç",
    "rejected": "–û—Ç–∫–ª–æ–Ω—ë–Ω",
    "cancelled": "–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
if not os.path.exists(QUESTIONS_FILE):
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump({"questions": []}, f, ensure_ascii=False, indent=2)

if not os.path.exists(BLACKLIST_FILE):
    with open(BLACKLIST_FILE, "w", encoding="utf-8") as f:
        json.dump({"blacklist": []}, f, ensure_ascii=False, indent=2)

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
spam_protection = {}
processed_updates = set()
question_hashes = {}

def get_question_hash(question: str) -> str:
    return hashlib.md5(question.lower().encode('utf-8')).hexdigest()

def check_blacklist(question: str) -> bool:
    try:
        with open(BLACKLIST_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        blacklist = data.get("blacklist", [])
        question_lower = question.lower()
        for word in blacklist:
            if word.lower() in question_lower:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '{word}' –≤ –≤–æ–ø—Ä–æ—Å–µ: {question}")
                return True
        return False
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {BLACKLIST_FILE}: {e}")
        return False

def check_question_meaning(question: str) -> bool:
    question_lower = question.lower().strip()
    if len(question_lower) < 10:
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(question_lower)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return False
    if re.match(r'^(.)\1{4,}$', question_lower.replace(' ', '')) or re.match(r'^(\W)\1{4,}$', question_lower):
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã ({question})")
        return False
    words = question_lower.split()
    if len(words) > 1 and len(set(words)) == 1:
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ ({question})")
        return False
    question_words = ["—á—Ç–æ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–µ", "–∫—Ç–æ", "–∑–∞—á–µ–º", "—Å–∫–æ–ª—å–∫–æ"]
    has_question_word = any(word in question_lower for word in question_words) or "?" in question_lower
    has_multiple_words = len(words) >= 3
    if not (has_question_word or has_multiple_words):
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç ({question})")
        return False
    return True

def check_question_similarity(new_question: str, existing_questions: list) -> tuple[bool, str]:
    new_question_lower = new_question.lower().strip()
    for q in existing_questions:
        if not q.get("cancelled", False):
            existing_question = q["question"].lower().strip()
            similarity = difflib.SequenceMatcher(None, new_question_lower, existing_question).ratio()
            if similarity > SIMILARITY_THRESHOLD:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å: '{new_question}' ~ '{q['question']}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f})")
                return True, q["question"]
    return False, ""

def custom_escape_markdown(text: str) -> str:
    special_chars = r'_*[]()~`>#+-|=}{.!'
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

def get_remaining_attempts(user_id: int, data: dict) -> int:
    pending_questions = [q for q in data["questions"] if q["user_id"] == user_id and q["status"] == "pending" and not q.get("cancelled", False)]
    logger.info(f"–ü–æ–¥—Å—á—ë—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è user_id {user_id}: {len(pending_questions)} –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    return max(0, MAX_PENDING_QUESTIONS - len(pending_questions))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üìã", callback_data="myquestions")],
        [InlineKeyboardButton("–ì–∞–π–¥ üìñ", callback_data="guide")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üëã *–ü—Ä–∏–≤–µ—Ç!* –≠—Ç–æ Q&A-–±–æ—Ç Mortis Play! üòé\n"
        f"–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤ –∏ —Å–∞–π—Ç–∞.\n\n"
        f"üìå *–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}\n"
        f"–ù–æ–≤–∏—á–æ–∫? –ñ–º–∏ *–ì–∞–π–¥* –∏–ª–∏ –ø–∏—à–∏ `/guide`!\n"
        f"–•–æ—á–µ—à—å –≤–æ–ø—Ä–æ—Å? –ü–∏—à–∏ `/ask`! üöÄ",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /guide –æ—Ç user_id {update.effective_user.id}")
    user_id = update.effective_user.id
    reply_to = update.message or update.callback_query.message
    if not reply_to or (update.message and not update.message.text):
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await reply_to.reply_text("üö® –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üìã", callback_data="myquestions")],
        [InlineKeyboardButton("–ù–∞ —Å–∞–π—Ç üåê", url=QA_WEBSITE)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        f"üìñ *–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤*\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Q&A-–±–æ—Ç Mortis Play! üòé\n\n"
        f"1Ô∏è‚É£ *–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å*: –ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
        f"   –í–æ–ø—Ä–æ—Å: 5‚Äì500 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π. *–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫*: {remaining_attempts} (–º–∞–∫—Å. 3).\n\n"
        f"2Ô∏è‚É£ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*: –ù–∞–∂–º–∏ *–£–≤–µ–¥–æ–º–∏—Ç—å üîî* –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å.\n\n"
        f"3Ô∏è‚É£ *–ü—Ä–æ–≤–µ—Ä—å –≤–æ–ø—Ä–æ—Å—ã*: –ü–∏—à–∏ `/myquestions` –∏–ª–∏ –∂–º–∏ *–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã*.\n\n"
        f"4Ô∏è‚É£ *–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ*: –ü—Ä–∏–Ω—è—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE}) –∑–∞ 1‚Äì48 —á–∞—Å–æ–≤.\n\n"
        f"5Ô∏è‚É£ *–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–Ω—è–ª–∏?* –£–∑–Ω–∞–µ—à—å, –µ—Å–ª–∏ –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–∏—à–∏ @dimap7221, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n\n"
        f"6Ô∏è‚É£ *–õ–∏–º–∏—Ç*: –ü–æ–∫–∞ 3 –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –Ω–æ–≤—ã–µ –Ω–µ –¥–æ–±–∞–≤–∏—à—å.\n\n"
        f"üöÄ *–ì–æ—Ç–æ–≤?* –ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—à–∏ `/ask`!"
    )
    try:
        await reply_to.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        logger.info(f"–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∞–π–¥–∞: {e}")
        text_plain = text.replace("*", "").replace("[—Å–∞–π—Ç–µ](https://mortisplay.ru/qa.html)", f"—Å–∞–π—Ç–µ {QA_WEBSITE}")
        await reply_to.reply_text(text_plain, reply_markup=reply_markup, parse_mode=None)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üìã", callback_data="myquestions")],
        [InlineKeyboardButton("–ì–∞–π–¥ üìñ", callback_data="guide")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        f"üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø Q&A-–±–æ—Ç Mortis Play üòé\n"
        f"üìå *–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}\n\n"
        f"üìã *–ö–æ–º–∞–Ω–¥—ã*:\n"
        f"‚Ä¢ `/start` ‚Äî –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        f"‚Ä¢ `/guide` ‚Äî –ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\n"
        f"‚Ä¢ `/ask <–≤–æ–ø—Ä–æ—Å>` ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        f"‚Ä¢ `/myquestions` ‚Äî –¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"‚Ä¢ `/help` ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        f"‚Ä¢ `/list` ‚Äî –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/clear` ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/delete <id>` ‚Äî –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/edit <id> <–≤–æ–ø—Ä–æ—Å>` ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>` ‚Äî –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)\n\n"
        f"üì¢ –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏. –ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ª–∏–º–∏—Ç!\n"
        f"–ù–æ–≤–∏—á–æ–∫? –ñ–º–∏ *–ì–∞–π–¥* –∏–ª–∏ –ø–∏—à–∏ `/guide`! üöÄ"
    )
    try:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /help: {e}")
        text_plain = text.replace("*", "").replace("[—Å–∞–π—Ç–µ](https://mortisplay.ru/qa.html)", f"—Å–∞–π—Ç–µ {QA_WEBSITE}")
        await update.message.reply_text(text_plain, reply_markup=reply_markup, parse_mode=None)

async def list_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /list –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /list –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    active_questions = [q for q in data["questions"] if not q.get("cancelled", False)]
    if not active_questions:
        await update.message.reply_text("üì≠ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*!", parse_mode="Markdown")
        logger.info("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç")
        return

    response = "*üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*:\n\n"
    for q in active_questions:
        status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
        escaped_question = custom_escape_markdown(q["question"])
        escaped_username = custom_escape_markdown(q["username"])
        cancel_reason = f", –ü—Ä–∏—á–∏–Ω–∞: *{custom_escape_markdown(q['cancel_reason'])}*" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
        response += f"**ID**: `{q['id']}`\n**–û—Ç**: @{escaped_username}\n**–í–æ–ø—Ä–æ—Å**: *{escaped_question}*\n**–°—Ç–∞—Ç—É—Å**: `{status}`{cancel_reason}\n\n"

    logger.info(f"–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {response}")
    try:
        await update.message.reply_text(response, parse_mode="MarkdownV2")
        logger.info(f"–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(active_questions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        plain_response = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"
        for q in active_questions:
            status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
            cancel_reason = f", –ü—Ä–∏—á–∏–Ω–∞: {q['cancel_reason']}" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
            plain_response += f"ID: {q['id']}\n–û—Ç: @{q['username']}\n–í–æ–ø—Ä–æ—Å: {q['question']}\n–°—Ç–∞—Ç—É—Å: {status}{cancel_reason}\n\n"
        await update.message.reply_text(plain_response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ plain-text —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ MarkdownV2")

async def my_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /myquestions –æ—Ç user_id {update.effective_user.id}")
    user_id = update.effective_user.id
    reply_to = update.message or update.callback_query.message
    if not reply_to or (update.message and not update.message.text):
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await reply_to.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    user_questions = [q for q in data["questions"] if q["user_id"] == user_id and not q.get("cancelled", False)]
    remaining_attempts = get_remaining_attempts(user_id, data)
    if not user_questions:
        await reply_to.reply_text(
            f"üì≠ *–¢—ã –Ω–µ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤*! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n"
            f"–ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>` –∏–ª–∏ –∂–º–∏ `/guide`! üöÄ",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç")
        return

    response = f"*üìã –¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã* (–ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*):\n\n"
    for q in user_questions:
        status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
        escaped_question = custom_escape_markdown(q["question"])
        escaped_answer = custom_escape_markdown(q["answer"]) if q["status"] == "approved" and "answer" in q else ""
        answer = f"\n**–û—Ç–≤–µ—Ç**: *{escaped_answer}*" if q["status"] == "approved" and "answer" in q else ""
        cancel_reason = f"\n**–ü—Ä–∏—á–∏–Ω–∞**: *{custom_escape_markdown(q['cancel_reason'])}*" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
        response += f"**ID**: `{q['id']}`\n**–í–æ–ø—Ä–æ—Å**: *{escaped_question}*\n**–°—Ç–∞—Ç—É—Å**: `{status}`{answer}{cancel_reason}\n\n"

    logger.info(f"–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id {user_id}: {response}")
    try:
        await reply_to.reply_text(response, parse_mode="MarkdownV2")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: {len(user_questions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        plain_response = f"üìã –¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}):\n\n"
        for q in user_questions:
            status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
            answer = f"\n–û—Ç–≤–µ—Ç: {q['answer']}" if q["status"] == "approved" and "answer" in q else ""
            cancel_reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {q['cancel_reason']}" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
            plain_response += f"ID: {q['id']}\n–í–æ–ø—Ä–æ—Å: {q['question']}\n–°—Ç–∞—Ç—É—Å: {status}{answer}{cancel_reason}\n\n"
        await reply_to.reply_text(plain_response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ plain-text —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ MarkdownV2")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /ask –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user = update.message.from_user
    user_id = user.id
    question = " ".join(context.args) if context.args else update.message.text.split("/ask", 1)[-1].strip()
    question_hash = get_question_hash(question)

    if not question:
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return
        remaining_attempts = get_remaining_attempts(user_id, data)
        text = (
            f"‚ùì –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ `/ask`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
            f"üìå –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!"
        )
        try:
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (–ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å): {e}")
            text_plain = text.replace("*", "")
            await update.message.reply_text(text_plain, parse_mode=None)
        return

    if not check_question_meaning(question):
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return
        remaining_attempts = get_remaining_attempts(user_id, data)
        text = (
            f"‚ùå –í–æ–ø—Ä–æ—Å *–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π*! üòø –ü—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
            f"üìå –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!"
        )
        try:
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π): {e}")
            text_plain = text.replace("*", "")
            await update.message.reply_text(text_plain, parse_mode=None)
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç user_id {user_id}: {question}")
        return

    current_time = time.time()
    if user_id in spam_protection:
        last_ask_time = spam_protection[user_id]["last_ask_time"]
        if current_time - last_ask_time < 60:
            try:
                with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except (json.JSONDecodeError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
                await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
                return
            remaining_attempts = get_remaining_attempts(user_id, data)
            text = (
                f"‚è≥ *–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!* –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É.\n"
                f"üìå –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n"
                f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!"
            )
            try:
                await update.message.reply_text(text, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (—Å–ø–∞–º): {e}")
                text_plain = text.replace("*", "")
                await update.message.reply_text(text_plain, parse_mode=None)
            logger.info(f"–°–ø–∞–º-–∞—Ç–∞–∫–∞ –æ—Ç user_id {user_id}: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
            return

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç
    if question_hash in question_hashes.get(user_id, []):
        remaining_attempts = get_remaining_attempts(user_id, data)
        text = (
            f"üîÅ *–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–¥–∞–Ω!* –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.\n"
            f"üìå –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!"
        )
        try:
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (–¥—É–±–ª–∏–∫–∞—Ç): {e}")
            text_plain = text.replace("*", "")
            await update.message.reply_text(text_plain, parse_mode=None)
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {user_id}: {question}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å
    is_similar, similar_question = check_question_similarity(question, data["questions"])
    if is_similar:
        remaining_attempts = get_remaining_attempts(user_id, data)
        escaped_similar = custom_escape_markdown(similar_question)
        text = (
            f"‚ö†Ô∏è *–ü–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–¥–∞–Ω*: *{escaped_similar}*\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∏–ª–∏ —É—Ç–æ—á–Ω–∏. üìå –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!"
        )
        try:
            await update.message.reply_text(text, parse_mode="MarkdownV2")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (–ø–æ—Ö–æ–∂–∏–π): {e}")
            text_plain = text.replace("*", "").replace(f"*{escaped_similar}*", similar_question)
            await update.message.reply_text(text_plain, parse_mode=None)
        logger.info(f"–ü–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç user_id {user_id}: {question} ~ {similar_question}")
        return

    pending_questions = [q for q in data["questions"] if q["user_id"] == user_id and q["status"] == "pending" and not q.get("cancelled", False)]
    if len(pending_questions) >= MAX_PENDING_QUESTIONS:
        text = (
            f"‚ö†Ô∏è *–õ–∏–º–∏—Ç {MAX_PENDING_QUESTIONS} –≤–æ–ø—Ä–æ—Å–∞!* –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!"
        )
        try:
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (–ª–∏–º–∏—Ç): {e}")
            text_plain = text.replace("*", "")
            await update.message.reply_text(text_plain, parse_mode=None)
        logger.info(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è user_id {user_id}: {len(pending_questions)}")
        return

    if len(question) < 5 or len(question) > 500:
        remaining_attempts = get_remaining_attempts(user_id, data)
        text = (
            f"üìè –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5‚Äì500 —Å–∏–º–≤–æ–ª–æ–≤!\n"
            f"üìå –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!"
        )
        try:
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (–¥–ª–∏–Ω–∞): {e}")
            text_plain = text.replace("*", "")
            await update.message.reply_text(text_plain, parse_mode=None)
        logger.info(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {user_id}: {len(question)} —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if check_blacklist(question):
        remaining_attempts = get_remaining_attempts(user_id, data)
        text = (
            f"üö´ –í–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç *–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞*! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.\n"
            f"üìå –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!"
        )
        try:
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫): {e}")
            text_plain = text.replace("*", "")
            await update.message.reply_text(text_plain, parse_mode=None)
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏–∑-–∑–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {question}")
        return

    question_id = len(data["questions"]) + 1
    data["questions"].append({
        "id": question_id,
        "user_id": user_id,
        "username": user.username or "–ê–Ω–æ–Ω–∏–º",
        "question": question,
        "status": "pending",
        "notify": False,
        "cancelled": False,
        "cancel_reason": ""
    })

    try:
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            updated_data = json.load(f)
        if not any(q["id"] == question_id for q in updated_data["questions"]):
            raise IOError("–í–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ questions.json")
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏/–ø—Ä–æ–≤–µ—Ä–∫–∏ {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    if user_id not in question_hashes:
        question_hashes[user_id] = []
    question_hashes[user_id].append(question_hash)
    spam_protection[user_id] = {"last_ask_time": current_time, "last_question": question}

    remaining_attempts = get_remaining_attempts(user_id, updated_data)
    keyboard = [[InlineKeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å üîî", callback_data=f"notify_{question_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        f"‚úÖ *–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üò∏ –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE}) (1‚Äì48 —á–∞—Å–æ–≤).\n"
        f"üìå –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n"
        f"–ù–µ –Ω–∞ —Å–∞–π—Ç–µ? –ü–∏—à–∏ @dimap7221!\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`"
    )
    try:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        logger.info(f"–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –æ—Ç user_id {user_id}: ID {question_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /ask (—É—Å–ø–µ—Ö): {e}")
        text_plain = text.replace("*", "").replace("[—Å–∞–π—Ç–µ](https://mortisplay.ru/qa.html)", f"—Å–∞–π—Ç–µ {QA_WEBSITE}")
        await update.message.reply_text(text_plain, reply_markup=reply_markup, parse_mode=None)

    escaped_question = custom_escape_markdown(question)
    escaped_username = custom_escape_markdown(user.username or "–ê–Ω–æ–Ω–∏–º")
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"*üîî –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å* \\(ID: `{question_id}`\\)\n"
                 f"**–û—Ç**: @{escaped_username}\n"
                 f"**–í–æ–ø—Ä–æ—Å**: *{escaped_question}*\n"
                 f"‚Ä¢ `/approve {question_id} <–æ—Ç–≤–µ—Ç>` ‚Äî –ü—Ä–∏–Ω—è—Ç—å\n"
                 f"‚Ä¢ `/reject {question_id}` ‚Äî –û—Ç–∫–ª–æ–Ω–∏—Ç—å\n"
                 f"‚Ä¢ `/cancel {question_id} <–ø—Ä–∏—á–∏–Ω–∞>` ‚Äî –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç @{user.username or '–ê–Ω–æ–Ω–∏–º'}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üîî –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (ID: {question_id})\n"
                 f"–û—Ç: @{user.username or '–ê–Ω–æ–Ω–∏–º'}\n"
                 f"–í–æ–ø—Ä–æ—Å: {question}\n"
                 f"‚Ä¢ /approve {question_id} <–æ—Ç–≤–µ—Ç> ‚Äî –ü—Ä–∏–Ω—è—Ç—å\n"
                 f"‚Ä¢ /reject {question_id} ‚Äî –û—Ç–∫–ª–æ–Ω–∏—Ç—å\n"
                 f"‚Ä¢ /cancel {question_id} <–ø—Ä–∏—á–∏–Ω–∞> ‚Äî –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode=None
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    callback_data = query.data
    logger.info(f"Callback {callback_data} –æ—Ç user_id {user_id}")

    if callback_data.startswith("notify_"):
        try:
            question_id = int(callback_data.split("_")[1])
            try:
                with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except (json.JSONDecodeError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
                await query.message.reply_text("üö® –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
                return

            for q in data["questions"]:
                if q["id"] == question_id and q["user_id"] == user_id and not q.get("cancelled", False):
                    q["notify"] = True
                    break
            else:
                await query.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è user_id {user_id}")
                return

            try:
                with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            except IOError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
                await query.message.reply_text("üö® –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
                return

            await query.message.edit_text(
                f"‚úÖ *–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üò∏ –¢—ã –±—É–¥–µ—à—å —É–≤–µ–¥–æ–º–ª—ë–Ω.\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                parse_mode="Markdown"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ notify callback: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç question_id {callback_data}")
            await query.message.reply_text("üö® –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")

    elif callback_data == "ask":
        await query.message.reply_text(
            f"‚ùì –ù–∞–ø–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'")

    elif callback_data == "myquestions":
        update.message = query.message  # –ü–µ—Ä–µ–¥–∞—ë–º message –¥–ª—è my_questions
        await my_questions(update, context)

    elif callback_data == "guide":
        update.message = query.message  # –ü–µ—Ä–µ–¥–∞—ë–º message –¥–ª—è guide
        await guide(update, context)

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /approve –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /approve –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /approve –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID –∏ –æ—Ç–≤–µ—Ç: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        answer = " ".join(args[1:]) if len(args) > 1 else None
        if not answer:
            await update.message.reply_text(
                f"‚ùå –£–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
                parse_mode="Markdown"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
            return

        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and q["status"] == "pending" and not q.get("cancelled", False):
                q["status"] = "approved"
                q["answer"] = answer
                website_button = [[InlineKeyboardButton("–ù–∞ —Å–∞–π—Ç üåê", url=QA_WEBSITE)]]
                reply_markup = InlineKeyboardMarkup(website_button)
                if q["notify"]:
                    try:
                        escaped_answer = custom_escape_markdown(answer)
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚úÖ *–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üòé\n"
                                 f"**–û—Ç–≤–µ—Ç**: *{escaped_answer}*\n"
                                 f"–°–º–æ—Ç—Ä–∏ –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE})!\n"
                                 f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                            reply_markup=reply_markup,
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! üòé\n"
                                 f"–û—Ç–≤–µ—Ç: {answer}\n"
                                 f"–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∞–π—Ç–µ: {QA_WEBSITE}\n"
                                 f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /guide",
                            reply_markup=reply_markup,
                            parse_mode=None
                        )
                break
        else:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        website_button = [[InlineKeyboardButton("–ù–∞ —Å–∞–π—Ç üåê", url=QA_WEBSITE)]]
        reply_markup = InlineKeyboardMarkup(website_button)
        await update.message.reply_text(
            f"‚úÖ –í–æ–ø—Ä–æ—Å `{question_id}` *–ø—Ä–∏–Ω—è—Ç*!\n"
            f"**–û—Ç–≤–µ—Ç**: *{answer}* üî•",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –ø—Ä–∏–Ω—è—Ç —Å –æ—Ç–≤–µ—Ç–æ–º: {answer}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reject –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /reject –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reject –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID: `/reject <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and q["status"] == "pending" and not q.get("cancelled", False):
                q["status"] = "rejected"
                if q["notify"]:
                    try:
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚ùå *–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω!* üòï –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.\n"
                                 f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                            parse_mode="Markdown"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                break
        else:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"‚ùå –í–æ–ø—Ä–æ—Å `{question_id}` *–æ—Ç–∫–ª–æ–Ω—ë–Ω*!",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/reject <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /cancel –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID –∏ –ø—Ä–∏—á–∏–Ω—É: `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /cancel: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        cancel_reason = " ".join(args[1:])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and not q.get("cancelled", False):
                q["status"] = "cancelled"
                q["cancel_reason"] = cancel_reason
                if q["notify"]:
                    try:
                        escaped_reason = custom_escape_markdown(cancel_reason)
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚ùå *–í–æ–ø—Ä–æ—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!* üòø\n"
                                 f"**–ü—Ä–∏—á–∏–Ω–∞**: *{escaped_reason}*\n"
                                 f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚ùå –í–æ–ø—Ä–æ—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω! üòø\n"
                                 f"–ü—Ä–∏—á–∏–Ω–∞: {cancel_reason}\n"
                                 f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /guide",
                            parse_mode=None
                        )
                break
        else:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"‚ùå –í–æ–ø—Ä–æ—Å `{question_id}` *–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω*!\n"
            f"**–ü—Ä–∏—á–∏–Ω–∞**: *{cancel_reason}*",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω, –ø—Ä–∏—á–∏–Ω–∞: {cancel_reason}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /cancel: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /delete –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /delete –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /delete –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID: `/delete <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /delete: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        original_length = len(data["questions"])
        data["questions"] = [q for q in data["questions"] if q["id"] != question_id]
        if len(data["questions"]) == original_length:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"üóëÔ∏è –í–æ–ø—Ä–æ—Å `{question_id}` *—É–¥–∞–ª—ë–Ω*!",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} —É–¥–∞–ª—ë–Ω")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/delete <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /delete: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /clear –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /clear –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        data = {"questions": []}
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    await update.message.reply_text(
        f"üóëÔ∏è *–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—á–∏—â–µ–Ω—ã*!",
        parse_mode="Markdown"
    )
    logger.info("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—á–∏—â–µ–Ω—ã")

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /edit –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID –∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: `/edit <id> <–≤–æ–ø—Ä–æ—Å>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        new_question = " ".join(args[1:])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and not q.get("cancelled", False):
                old_question = q["question"]
                q["question"] = new_question
                break
        else:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"‚úèÔ∏è –í–æ–ø—Ä–æ—Å `{question_id}` *–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω*!\n"
            f"**–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å**: *{new_question}*",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω: {old_question} -> {new_question}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/edit <id> <–≤–æ–ø—Ä–æ—Å>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def main_async():
    logger.info(f"–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª —Å Python {sys.version}")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω: {TOKEN[:10]}...{TOKEN[-10:]}")

    try:
        app = Application.builder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("guide", guide))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("list", list_questions))
        app.add_handler(CommandHandler("myquestions", my_questions))
        app.add_handler(CommandHandler("ask", ask))
        app.add_handler(CommandHandler("approve", approve))
        app.add_handler(CommandHandler("reject", reject))
        app.add_handler(CommandHandler("cancel", cancel))
        app.add_handler(CommandHandler("delete", delete))
        app.add_handler(CommandHandler("clear", clear))
        app.add_handler(CommandHandler("edit", edit))
        app.add_handler(CallbackQueryHandler(button_callback, pattern="^(notify_|ask|myquestions|guide)"))

        await app.initialize()
        await app.start()
        await app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        while True:
            await asyncio.sleep(3600)  # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    import sys
    asyncio.run(main_async())