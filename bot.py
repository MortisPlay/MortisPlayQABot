import json
import logging
import os
import time
import asyncio
import hashlib
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.helpers import escape_markdown
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (stdout + —Ñ–∞–π–ª)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–µ!")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 335236137
QUESTIONS_FILE = "questions.json"
BLACKLIST_FILE = "blacklist.json"
QA_WEBSITE = "https://mortisplay.ru/qa.html"
MAX_PENDING_QUESTIONS = 3  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_TRANSLATIONS = {
    "pending": "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è",
    "approved": "–ü—Ä–∏–Ω—è—Ç",
    "rejected": "–û—Ç–∫–ª–æ–Ω—ë–Ω",
    "cancelled": "–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
if not os.path.exists(QUESTIONS_FILE):
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump({"questions": []}, f, ensure_ascii=False, indent=2)

if not os.path.exists(BLACKLIST_FILE):
    with open(BLACKLIST_FILE, "w", encoding="utf-8") as f:
        json.dump({"blacklist": []}, f, ensure_ascii=False, indent=2)

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
spam_protection = {}
processed_updates = set()
question_hashes = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—ç—à–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤

def get_question_hash(question: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MD5 —Ö—ç—à –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
    return hashlib.md5(question.lower().encode('utf-8')).hexdigest()

def check_blacklist(question: str) -> bool:
    try:
        with open(BLACKLIST_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        blacklist = data.get("blacklist", [])
        question_lower = question.lower()
        for word in blacklist:
            if word.lower() in question_lower:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '{word}' –≤ –≤–æ–ø—Ä–æ—Å–µ: {question}")
                return True
        return False
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {BLACKLIST_FILE}: {e}")
        return False

def check_question_meaning(question: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å —Å–º—ã—Å–ª."""
    question_lower = question.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(question_lower) < 10:
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(question_lower)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∞–∞–∞–∞–∞" –∏–ª–∏ "!!!!")
    if re.match(r'^(.)\1{4,}$', question_lower.replace(' ', '')) or re.match(r'^(\W)\1{4,}$', question_lower):
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã ({question})")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ª–æ–ª –ª–æ–ª –ª–æ–ª")
    words = question_lower.split()
    if len(words) > 1 and len(set(words)) == 1:
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ ({question})")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
    question_words = ["—á—Ç–æ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–µ", "–∫—Ç–æ", "–∑–∞—á–µ–º", "—Å–∫–æ–ª—å–∫–æ"]
    has_question_word = any(word in question_lower for word in question_words) or "?" in question_lower
    has_multiple_words = len(words) >= 3  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 3 —Å–ª–æ–≤–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
    
    if not (has_question_word or has_multiple_words):
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç ({question})")
        return False
    
    return True

def custom_escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2, –≤–∫–ª—é—á–∞—è –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏."""
    text = escape_markdown(text, version=2)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏
    text = text.replace('(', r'\(').replace(')', r'\)')
    return text

def get_remaining_attempts(user_id: int, data: dict) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    pending_questions = [q for q in data["questions"] if q["user_id"] == user_id and q["status"] == "pending" and not q.get("cancelled", False)]
    logger.info(f"–ü–æ–¥—Å—á—ë—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è user_id {user_id}: {len(pending_questions)} –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    return max(0, MAX_PENDING_QUESTIONS - len(pending_questions))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üî•", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üò∏", callback_data="myquestions")],
        [InlineKeyboardButton("–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ üìñ", callback_data="guide")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! üòé –≠—Ç–æ *Q&A-–±–æ—Ç Mortis Play*! –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤ –∏ —Å–∞–π—Ç–∞! üî•\n"
        f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å *{remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫* –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.\n"
        f"–ù–æ–≤–∏—á–æ–∫? –ü–∏—à–∏ `/guide` –∏–ª–∏ –∂–º–∏ *–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤* –Ω–∏–∂–µ! üìñ\n"
        f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π `/ask` –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞!",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /guide –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üî•", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üò∏", callback_data="myquestions")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç üåê", url=QA_WEBSITE)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"*–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤* üìñ\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Q&A-–±–æ—Ç Mortis Play*! üòé –í–æ—Ç –∫–∞–∫ –Ω–∞—á–∞—Ç—å:\n\n"
        f"1. **–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å**:\n"
        f"   –ü–∏—à–∏ `/ask <—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å>`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
        f"   –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º –∏ –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –£ —Ç–µ–±—è *{remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫* –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–¥–æ 3 –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ).\n\n"
        f"2. **–í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**:\n"
        f"   –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ *–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ üîî*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –ø—Ä–∏–Ω—è—Ç –æ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n"
        f"3. **–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã**:\n"
        f"   –ü–∏—à–∏ `/myquestions` –∏–ª–∏ –∂–º–∏ *–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üò∏*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–≤–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        f"4. **–°–º–æ—Ç—Ä–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ**:\n"
        f"   –ü—Ä–∏–Ω—è—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–∞ [—Å–∞–π—Ç–µ Q&A]({QA_WEBSITE}) –≤ —Ç–µ—á–µ–Ω–∏–µ 1-48 —á–∞—Å–æ–≤.\n"
        f"   –ñ–º–∏ *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç üåê* –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {QA_WEBSITE}\n\n"
        f"5. **–ß—Ç–æ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–Ω—è–ª–∏?**\n"
        f"   –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω, —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–∏–ª üîî).\n"
        f"   –ü–∏—à–∏ –∞–¥–º–∏–Ω—É *@dimap7221* –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
        f"6. **–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤**:\n"
        f"   –ü–æ–∫–∞ —É —Ç–µ–±—è 3 –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –Ω–æ–≤—ã–µ –Ω–µ –¥–æ–±–∞–≤–∏—à—å. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å –æ–¥–æ–±—Ä—è—é—Ç, –æ—Ç–∫–ª–æ–Ω—è—é—Ç –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä—É—é—Ç.\n\n"
        f"*–ì–æ—Ç–æ–≤?* –ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –ø–∏—à–∏ `/ask`! üöÄ",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    logger.info(f"–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id {user_id}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üî•", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üò∏", callback_data="myquestions")],
        [InlineKeyboardButton("–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ üìñ", callback_data="guide")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! üòé –Ø –±–æ—Ç Mortis Play, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∞–π—Ç–∞!\n\n"
        f"*–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.*\n\n"
        f"*–ß—Ç–æ —è —É–º–µ—é:*\n"
        f"- `/start` ‚Äî –ù–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π! üò∏\n"
        f"- `/guide` ‚Äî –ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ üìñ\n"
        f"- `/ask <–≤–æ–ø—Ä–æ—Å>` ‚Äî –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
        f"- `/myquestions` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å üò∫\n"
        f"- `/help` ‚Äî –ü–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ üï∂\n"
        f"- `/list` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"- `/clear` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"- `/delete <id>` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, —É–¥–∞–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ ID\n"
        f"- `/edit <id> <–Ω–æ–≤—ã–π_–≤–æ–ø—Ä–æ—Å>` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ ID\n"
        f"- `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>` ‚Äî *–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞*, –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã\n\n"
        f"*–í–∞–∂–Ω–æ*: –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º). "
        f"–ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è –±–µ–∑ —Ç—Ä–∞—Ç—ã –ø–æ–ø—ã—Ç–æ–∫! üöÄ\n"
        f"–ù–æ–≤–∏—á–æ–∫? –ü–∏—à–∏ `/guide` –∏–ª–∏ –∂–º–∏ *–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤* –Ω–∏–∂–µ! üìñ",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def list_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /list –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /list –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    active_questions = [q for q in data["questions"] if q.get("cancelled", False) == False]
    if not active_questions:
        await update.message.reply_text("–ü–æ–∫–∞ *–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*! üòø", parse_mode="Markdown")
        logger.info("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç")
        return
    response = "*–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*:\n"
    for q in active_questions:
        status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
        escaped_question = custom_escape_markdown(q["question"])
        escaped_username = custom_escape_markdown(q["username"])
        cancel_reason = f", –ü—Ä–∏—á–∏–Ω–∞: *{custom_escape_markdown(q['cancel_reason'])}*" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
        response += f"ID: `{q['id']}`, –û—Ç: @{escaped_username}, –í–æ–ø—Ä–æ—Å: *{escaped_question}*, –°—Ç–∞—Ç—É—Å: `{status}`{cancel_reason}\n"
    
    logger.info(f"–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {response}")
    try:
        await update.message.reply_text(response, parse_mode="MarkdownV2")
        logger.info(f"–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(active_questions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.", parse_mode="Markdown")

async def my_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /myquestions –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    user_questions = [q for q in data["questions"] if q["user_id"] == user_id and q.get("cancelled", False) == False]
    remaining_attempts = get_remaining_attempts(user_id, data)
    if not user_questions:
        await update.message.reply_text(
            f"–¢—ã –µ—â—ë *–Ω–µ –∑–∞–¥–∞–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*! üòø –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å *{remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫*.\n–ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>` –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ `/guide`!",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç")
        return
    response = f"*–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã* (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*):\n"
    for q in user_questions:
        status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
        escaped_question = custom_escape_markdown(q["question"])
        escaped_answer = custom_escape_markdown(q["answer"]) if q["status"] == "approved" and "answer" in q else ""
        answer = f", –û—Ç–≤–µ—Ç: *{escaped_answer}*" if q["status"] == "approved" and "answer" in q else ""
        cancel_reason = f", –ü—Ä–∏—á–∏–Ω–∞: *{custom_escape_markdown(q['cancel_reason'])}*" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
        response += f"ID: `{q['id']}`, –í–æ–ø—Ä–æ—Å: *{escaped_question}*, –°—Ç–∞—Ç—É—Å: `{status}`{answer}{cancel_reason}\n"
    
    logger.info(f"–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id {user_id}: {response}")
    try:
        await update.message.reply_text(response, parse_mode="MarkdownV2")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: {len(user_questions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.", parse_mode="Markdown")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /ask –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user = update.message.from_user
    user_id = user.id
    question = " ".join(context.args) if context.args else update.message.text
    question_hash = get_question_hash(question)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
    if not check_question_meaning(question):
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"–ô–æ—É, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å *–∫–∞–∂–µ—Ç—Å—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º*! üòø –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: `–ö–∞–∫—É—é –∏–≥—Ä—É —Ç—ã —Å—Ç—Ä–∏–º–∏—à—å —á–∞—â–µ –≤—Å–µ–≥–æ?`\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç user_id {user_id}: {question}")
        return

    current_time = time.time()
    if user_id in spam_protection:
        last_ask_time = spam_protection[user_id]["last_ask_time"]
        if current_time - last_ask_time < 60:
            try:
                with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except (json.JSONDecodeError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
                return
            remaining_attempts = get_remaining_attempts(user_id, data)
            await update.message.reply_text(
                f"–ô–æ—É, *–Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ*! üòé –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
                parse_mode="Markdown"
            )
            logger.info(f"–°–ø–∞–º-–∞—Ç–∞–∫–∞ –æ—Ç user_id {user_id}: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
            return

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Ö—ç—à—É
    if question_hash in question_hashes.get(user_id, []):
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"–≠–π, —Ç—ã *—É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª* —ç—Ç–æ –∏–ª–∏ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ–µ! üòï –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {user_id}: {question}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    pending_questions = [q for q in data["questions"] if q["user_id"] == user_id and q["status"] == "pending" and q.get("cancelled", False) == False]
    if len(pending_questions) >= MAX_PENDING_QUESTIONS:
        await update.message.reply_text(
            f"–ô–æ—É, —É —Ç–µ–±—è —É–∂–µ *{MAX_PENDING_QUESTIONS} –≤–æ–ø—Ä–æ—Å–∞* –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏! üòé –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
        logger.info(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è user_id {user_id}: {len(pending_questions)}")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞

    if not context.args and update.message.text.startswith("/ask"):
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"–ô–æ—É, –Ω–∞–ø–∏—à–∏ *–≤–æ–ø—Ä–æ—Å* –ø–æ—Å–ª–µ `/ask`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
        return

    if len(question) < 5 or len(question) > 500:
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç *5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤*! üòé –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
        logger.info(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {user_id}: {len(question)} —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if check_blacklist(question):
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"–ô–æ—É, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç *–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞*! üòø –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏–∑-–∑–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {question}")
        return

    question_id = len(data["questions"]) + 1
    data["questions"].append({
        "id": question_id,
        "user_id": user_id,
        "username": user.username or "–ê–Ω–æ–Ω–∏–º",
        "question": question,
        "status": "pending",
        "notify": False,
        "cancelled": False,
        "cancel_reason": ""
    })

    try:
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö—ç—à–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤
    if user_id not in question_hashes:
        question_hashes[user_id] = []
    question_hashes[user_id].append(question_hash)
    spam_protection[user_id] = {"last_ask_time": current_time, "last_question": question}

    # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            updated_data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—á—Ç–µ–Ω–∏—è {QUESTIONS_FILE} –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, updated_data)
    keyboard = [[InlineKeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ üîî", callback_data=f"notify_{question_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"**–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!** –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ *—Å–∞–π—Ç–µ*! üò∏ *–î–æ–≥–µ –æ–¥–æ–±—Ä—è–µ—Ç* üê∂\n\n"
        f"*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∞–π—Ç –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 1 –¥–æ 48 —á–∞—Å–æ–≤.* –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –ø–∏—à–∏ –≤ –ª–∏—á–∫—É *@dimap7221*! üòé\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π!",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    escaped_question = custom_escape_markdown(question)
    escaped_username = custom_escape_markdown(user.username or "–ê–Ω–æ–Ω–∏–º")
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"*–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å* \\(ID: `{question_id}`\\)\n–û—Ç: @{escaped_username}\n–í–æ–ø—Ä–æ—Å: *{escaped_question}*\n`/approve {question_id} <–æ—Ç–≤–µ—Ç>` ‚Äî –ø—Ä–∏–Ω—è—Ç—å\n`/reject {question_id}` ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n`/cancel {question_id} <–ø—Ä–∏—á–∏–Ω–∞>` ‚Äî –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç @{user.username or '–ê–Ω–æ–Ω–∏–º'}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"*–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å* (ID: {question_id})\n–û—Ç: @{user.username or '–ê–Ω–æ–Ω–∏–º'}\n–í–æ–ø—Ä–æ—Å: {question}\n`/approve {question_id} <–æ—Ç–≤–µ—Ç>` ‚Äî –ø—Ä–∏–Ω—è—Ç—å\n`/reject {question_id}` ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n`/cancel {question_id} <–ø—Ä–∏—á–∏–Ω–∞>` ‚Äî –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode=None
        )

async def notify_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Callback notify –æ—Ç user_id {update.effective_user.id}")
    query = update.callback_query
    await query.answer()
    question_id = int(query.data.split("_")[1])
    user_id = query.from_user.id

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    for q in data["questions"]:
        if q["id"] == question_id and q["user_id"] == user_id and not q.get("cancelled", False):
            q["notify"] = True
            break
    else:
        await query.message.reply_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω! üòø", parse_mode="Markdown")
        logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è user_id {user_id}")
        return

    try:
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
        return

    await query.message.edit_text(
        "**–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!** –¢—ã –±—É–¥–µ—à—å *—É–≤–µ–¥–æ–º–ª—ë–Ω* –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ! üòé\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π!",
        parse_mode="Markdown"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /approve –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /approve –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /approve –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞* –∏ *–æ—Ç–≤–µ—Ç*: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        answer = " ".join(args[1:]) if len(args) > 1 else None
        if not answer:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏ *–æ—Ç–≤–µ—Ç* –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
                parse_mode="Markdown"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
            return

        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and q["status"] == "pending" and not q.get("cancelled", False):
                q["status"] = "approved"
                q["answer"] = answer
                website_button = [[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ üåê", url=QA_WEBSITE)]]
                reply_markup = InlineKeyboardMarkup(website_button)
                if q["notify"]:
                    try:
                        escaped_answer = custom_escape_markdown(answer)
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"*–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üòé –û—Ç–≤–µ—Ç: *{escaped_answer}*\n–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∞–π—Ç–µ!\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ `/guide`",
                            reply_markup=reply_markup,
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"**–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!** üòé –û—Ç–≤–µ—Ç: {answer}\n–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∞–π—Ç–µ!\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ `/guide`",
                            reply_markup=reply_markup,
                            parse_mode=None
                        )
                break
        else:
            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        website_button = [[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ üåê", url=QA_WEBSITE)]]
        reply_markup = InlineKeyboardMarkup(website_button)
        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å `{question_id}` *–ø—Ä–∏–Ω—è—Ç* —Å –æ—Ç–≤–µ—Ç–æ–º: *{answer}* üî•",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –ø—Ä–∏–Ω—è—Ç —Å –æ—Ç–≤–µ—Ç–æ–º: {answer}")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reject –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /reject –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reject –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞*: `/reject <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and q["status"] == "pending" and not q.get("cancelled", False):
                q["status"] = "rejected"
                if q["notify"]:
                    try:
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text="–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å *–æ—Ç–∫–ª–æ–Ω—ë–Ω* üòï –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π!\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
                            parse_mode="Markdown"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                break
        else:
            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å `{question_id}` *–æ—Ç–∫–ª–æ–Ω—ë–Ω* üòø",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/reject <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /cancel –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞* –∏ *–ø—Ä–∏—á–∏–Ω—É –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è*: `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /cancel: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        cancel_reason = " ".join(args[1:])
        if len(cancel_reason) > 500:
            await update.message.reply_text(
                "–ü—Ä–∏—á–∏–Ω–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å *500 —Å–∏–º–≤–æ–ª–æ–≤*! üòé",
                parse_mode="Markdown"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /cancel: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
            return

        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and not q.get("cancelled", False):
                q["cancelled"] = True
                q["status"] = "cancelled"
                q["cancel_reason"] = cancel_reason
                if q["notify"]:
                    try:
                        escaped_reason = custom_escape_markdown(cancel_reason)
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å *–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω* üòï –ü—Ä–∏—á–∏–Ω–∞: *{escaped_reason}*\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º (@dimap7221) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π!\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å *–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω* üòï –ü—Ä–∏—á–∏–Ω–∞: {cancel_reason}\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º (@dimap7221) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π!\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
                            parse_mode=None
                        )
                break
        else:
            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω* –∏–ª–∏ —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        escaped_reason = custom_escape_markdown(cancel_reason)
        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å `{question_id}` *–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω* üòø –ü—Ä–∏—á–∏–Ω–∞: *{escaped_reason}*",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π: {cancel_reason}")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /cancel: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /clear –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /clear –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info("–ö–æ–º–∞–Ω–¥–∞ /clear –æ—Ç –∞–¥–º–∏–Ω–∞: –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    try:
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump({"questions": []}, f, ensure_ascii=False, indent=2)
        question_hashes.clear()  # –û—á–∏—Å—Ç–∫–∞ —Ö—ç—à–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤
        await update.message.reply_text(
            "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã *–æ—á–∏—â–µ–Ω—ã*! üò∫ ID –Ω–∞—á–Ω—ë—Ç—Å—è —Å 1.",
            parse_mode="Markdown"
        )
        logger.info("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ö—ç—à–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /delete –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /delete –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /delete –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if not args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞*: `/delete <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /delete: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        initial_length = len(data["questions"])
        data["questions"] = [q for q in data["questions"] if q["id"] != question_id]
        if len(data["questions"]) == initial_length:
            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*! üòø",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ö—ç—à–∞ –≤–æ–ø—Ä–æ—Å–∞
        for user_id, hashes in question_hashes.items():
            for q in data["questions"]:
                if q["id"] == question_id:
                    question_hash = get_question_hash(q["question"])
                    if question_hash in hashes:
                        hashes.remove(question_hash)
                        logger.info(f"–•—ç—à –≤–æ–ø—Ä–æ—Å–∞ ID {question_id} —É–¥–∞–ª—ë–Ω –¥–ª—è user_id {user_id}")
                    break

        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å `{question_id}` *—É–¥–∞–ª—ë–Ω*!",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/delete <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /delete: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–ô–æ—É, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /edit –æ—Ç user_id {update.message.from_user.id}")
        return

    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit –æ—Ç –∞–¥–º–∏–Ω–∞: {update.message.text}")
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ *ID –≤–æ–ø—Ä–æ—Å–∞* –∏ *–Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å*: `/edit <id> <–Ω–æ–≤—ã–π_–≤–æ–ø—Ä–æ—Å>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        new_question = " ".join(args[1:])
        new_question_hash = get_question_hash(new_question)
        if len(new_question) < 5 or len(new_question) > 500:
            await update.message.reply_text(
                "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç *5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤*! üòé",
                parse_mode="Markdown"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
            return

        if not check_question_meaning(new_question):
            await update.message.reply_text(
                "–ô–æ—É, –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å *–∫–∞–∂–µ—Ç—Å—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º*! üòø –ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: `–ö–∞–∫—É—é –∏–≥—Ä—É —Ç—ã —Å—Ç—Ä–∏–º–∏—à—å —á–∞—â–µ –≤—Å–µ–≥–æ?`\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
                parse_mode="Markdown"
            )
            logger.info(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π: {new_question}")
            return

        if check_blacklist(new_question):
            await update.message.reply_text(
                "–ô–æ—É, –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç *–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞*! üòø –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
                parse_mode="Markdown"
            )
            logger.info(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏–∑-–∑–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {new_question}")
            return

        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and not q.get("cancelled", False):
                old_question = q["question"]
                old_question_hash = get_question_hash(old_question)
                q["question"] = new_question
                try:
                    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                except IOError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
                    await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö—ç—à–∞ –≤–æ–ø—Ä–æ—Å–∞
                for user_id, hashes in question_hashes.items():
                    if old_question_hash in hashes:
                        hashes.remove(old_question_hash)
                        hashes.append(new_question_hash)
                        logger.info(f"–•—ç—à –≤–æ–ø—Ä–æ—Å–∞ ID {question_id} –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è user_id {user_id}")
                await update.message.reply_text(
                    f"–í–æ–ø—Ä–æ—Å `{question_id}` *–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω*! üò∫\n–°—Ç–∞—Ä—ã–π: *{old_question}*\n–ù–æ–≤—ã–π: *{new_question}*",
                    parse_mode="Markdown"
                )
                logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω: —Å—Ç–∞—Ä—ã–π: {old_question}, –Ω–æ–≤—ã–π: {new_question}")
                return

        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å —Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω* –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω! üòø",
            parse_mode="Markdown"
        )
        logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    except ValueError:
        await update.message.reply_text(
            "ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—á–∏—Å–ª–æ–º*: `/edit <id> <–Ω–æ–≤—ã–π_–≤–æ–ø—Ä–æ—Å>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {update.effective_user.id}: {update.message.text}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ, —É–¥–∞–ª—ë–Ω–Ω–æ–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    if update.message.from_user.id == ADMIN_ID:
        await update.message.reply_text(
            "–ô–æ—É, *–∞–¥–º–∏–Ω*! –ò—Å–ø–æ–ª—å–∑—É–π `/approve`, `/reject`, `/cancel`, `/list`, `/clear`, `/delete`, `/edit` –∏–ª–∏ `/ask` –¥–ª—è —Ç–µ—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ üòé",
            parse_mode="Markdown"
        )
    else:
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return
        remaining_attempts = get_remaining_attempts(update.message.from_user.id, data)
        await update.message.reply_text(
            f"–ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>`, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å *—ç–ø–∏—á–Ω—ã–π* –≤–æ–ø—Ä–æ—Å! üòé –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–ù–æ–≤–∏—á–æ–∫? –°–º–æ—Ç—Ä–∏ `/guide`! üìñ",
            parse_mode="Markdown"
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Callback button –æ—Ç user_id {update.effective_user.id}: {update.callback_query.data}")
    query = update.callback_query
    await query.answer()
    if query.data == "ask":
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return
        remaining_attempts = get_remaining_attempts(query.from_user.id, data)
        await query.message.reply_text(
            f"–ô–æ—É, –Ω–∞–ø–∏—à–∏ `/ask <—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å>`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*.\n–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
    elif query.data == "myquestions":
        user_id = query.from_user.id
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        user_questions = [q for q in data["questions"] if q["user_id"] == user_id and q.get("cancelled", False) == False]
        remaining_attempts = get_remaining_attempts(user_id, data)
        if not user_questions:
            await query.message.reply_text(
                f"–¢—ã –µ—â—ë *–Ω–µ –∑–∞–¥–∞–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*! üòø –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å *{remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫*.\n–ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>` –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ `/guide`!",
                parse_mode="Markdown"
            )
            return
        response = f"*–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã* (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*):\n"
        for q in user_questions:
            status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
            escaped_question = custom_escape_markdown(q["question"])
            escaped_answer = custom_escape_markdown(q["answer"]) if q["status"] == "approved" and "answer" in q else ""
            answer = f", –û—Ç–≤–µ—Ç: *{escaped_answer}*" if q["status"] == "approved" and "answer" in q else ""
            cancel_reason = f", –ü—Ä–∏—á–∏–Ω–∞: *{custom_escape_markdown(q['cancel_reason'])}*" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
            response += f"ID: `{q['id']}`, –í–æ–ø—Ä–æ—Å: *{escaped_question}*, –°—Ç–∞—Ç—É—Å: `{status}`{answer}{cancel_reason}\n"
        
        logger.info(f"–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è callback user_id {user_id}: {response}")
        try:
            await query.message.reply_text(response, parse_mode="MarkdownV2")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤! üòø –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.", parse_mode="Markdown")
    elif query.data == "guide":
        user_id = query.from_user.id
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö! üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", parse_mode="Markdown")
            return

        remaining_attempts = get_remaining_attempts(user_id, data)
        keyboard = [
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üî•", callback_data="ask")],
            [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üò∏", callback_data="myquestions")],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç üåê", url=QA_WEBSITE)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            f"*–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤* üìñ\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Q&A-–±–æ—Ç Mortis Play*! üòé –í–æ—Ç –∫–∞–∫ –Ω–∞—á–∞—Ç—å:\n\n"
            f"1. **–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å**:\n"
            f"   –ü–∏—à–∏ `/ask <—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å>`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
            f"   –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º –∏ –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –£ —Ç–µ–±—è *{remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫* –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–¥–æ 3 –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ).\n\n"
            f"2. **–í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**:\n"
            f"   –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ *–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ üîî*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –ø—Ä–∏–Ω—è—Ç –æ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n"
            f"3. **–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã**:\n"
            f"   –ü–∏—à–∏ `/myquestions` –∏–ª–∏ –∂–º–∏ *–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üò∏*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–≤–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
            f"4. **–°–º–æ—Ç—Ä–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ**:\n"
            f"   –ü—Ä–∏–Ω—è—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–∞ [—Å–∞–π—Ç–µ Q&A]({QA_WEBSITE}) –≤ —Ç–µ—á–µ–Ω–∏–µ 1-48 —á–∞—Å–æ–≤.\n"
            f"   –ñ–º–∏ *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç üåê* –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {QA_WEBSITE}\n\n"
            f"5. **–ß—Ç–æ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–Ω—è–ª–∏?**\n"
            f"   –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω, —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–∏–ª üîî).\n"
            f"   –ü–∏—à–∏ –∞–¥–º–∏–Ω—É *@dimap7221* –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
            f"6. **–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤**:\n"
            f"   –ü–æ–∫–∞ —É —Ç–µ–±—è 3 –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –Ω–æ–≤—ã–µ –Ω–µ –¥–æ–±–∞–≤–∏—à—å. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å –æ–¥–æ–±—Ä—è—é—Ç, –æ—Ç–∫–ª–æ–Ω—è—é—Ç –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä—É—é—Ç.\n\n"
            f"*–ì–æ—Ç–æ–≤?* –ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –ø–∏—à–∏ `/ask`! üöÄ",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        logger.info(f"–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ callback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id {user_id}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"*–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ*! üòø: {context.error}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")

async def notify_admin_on_start(app: Application):
    try:
        await app.bot.send_message(
            chat_id=ADMIN_ID,
            text="**–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ Railway!** üòé *–ö–æ—Ç –æ–¥–æ–±—Ä—è–µ—Ç* üêæ",
            parse_mode="Markdown"
        )
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

async def main_async():
    logger.info(f"–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª —Å Python {os.sys.version}")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω: {TOKEN[:10]}...{TOKEN[-10:]}")
    try:
        app = Application.builder().token(TOKEN).build()
        await app.initialize()
        logger.info("Application —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        if "InvalidToken" in str(e) or "401" in str(e):
            logger.error("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å TELEGRAM_TOKEN –≤ .env –∏–ª–∏ @BotFather.")
        raise
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("guide", guide))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_questions))
    app.add_handler(CommandHandler("myquestions", my_questions))
    app.add_handler(CommandHandler("ask", ask))
    app.add_handler(CommandHandler("approve", approve))
    app.add_handler(CommandHandler("reject", reject))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("clear", clear))
    app.add_handler(CommandHandler("delete", delete))
    app.add_handler(CommandHandler("edit", edit))
    app.add_handler(CallbackQueryHandler(notify_callback, pattern="^notify_"))
    app.add_handler(CallbackQueryHandler(button_callback, pattern="^(ask|myquestions|guide)$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, lambda u, c: None))
    app.add_error_handler(error_handler)

    await notify_admin_on_start(app)
    await app.updater.start_polling()
    await app.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
    try:
        await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    except asyncio.CancelledError:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await app.stop()
        await app.updater.stop()

if __name__ == "__main__":
    asyncio.run(main_async())