import json
import logging
import os
import time
import asyncio
import hashlib
import re
import difflib
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.helpers import escape_markdown
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(".env")
TOKEN = os.getenv("TELEGRAM_TOKEN")
QUESTIONS_FILE = os.getenv("QUESTIONS_FILE", "questions.json")
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 335236137
BLACKLIST_FILE = "blacklist.json"
QA_WEBSITE = "https://mortisplay.ru/qa.html"
MAX_PENDING_QUESTIONS = 3
SIMILARITY_THRESHOLD = 0.6

# –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_TRANSLATIONS = {
    "pending": "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è",
    "approved": "–ü—Ä–∏–Ω—è—Ç",
    "rejected": "–û—Ç–∫–ª–æ–Ω—ë–Ω",
    "cancelled": "–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
if not os.path.exists(QUESTIONS_FILE):
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump({"questions": []}, f, ensure_ascii=False, indent=2)

if not os.path.exists(BLACKLIST_FILE):
    with open(BLACKLIST_FILE, "w", encoding="utf-8") as f:
        json.dump({"blacklist": []}, f, ensure_ascii=False, indent=2)

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
spam_protection = {}
processed_updates = set()
question_hashes = {}

def get_question_hash(question: str) -> str:
    return hashlib.md5(question.lower().encode('utf-8')).hexdigest()

def check_blacklist(question: str) -> bool:
    try:
        with open(BLACKLIST_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        blacklist = data.get("blacklist", [])
        question_lower = question.lower()
        for word in blacklist:
            if word.lower() in question_lower:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '{word}' –≤ –≤–æ–ø—Ä–æ—Å–µ: {question}")
                return True
        return False
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {BLACKLIST_FILE}: {e}")
        return False

def check_question_meaning(question: str) -> tuple[bool, str]:
    question_lower = question.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–µ
    bot_keywords = ["–±–æ—Ç", "telegram", "—Ç–µ–ª–µ–≥–∞", "—Ç–µ–ª–µ–≥—Ä–∞–º", "bot", "@groupanonymousbot"]
    if any(keyword in question_lower for keyword in bot_keywords):
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω: —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ ({question})")
        return False, "–í–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ –∏–ª–∏ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ Mortis Play!"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–æ–ø—Ä–æ—Å–∞
    if len(question_lower) < 10:
        return False, "–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
    if re.match(r'^(.)\1{4,}$', question_lower.replace(' ', '')) or re.match(r'^(\W)\1{4,}$', question_lower):
        return False, "–í–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    words = question_lower.split()
    if len(words) > 1 and len(set(words)) == 1:
        return False, "–í–æ–ø—Ä–æ—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–º–æ—Ä—Ç–∏—Å1 –º–æ—Ä—Ç–∏—Å2")
    if re.search(r'\b\w*\d+\w*\b\s+\b\w*\d+\w*\b', question_lower):
        return False, "–í–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–º–æ—Ä—Ç–∏—Å1 –º–æ—Ä—Ç–∏—Å2')."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∞–≤—Ç–∞–≤–∞–≤–∞–≤—Ç–∞–º")
    if re.match(r'^\w{2,}(\w)\1{2,}', question_lower.replace(' ', '')):
        return False, "–í–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    question_words = ["—á—Ç–æ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–µ", "–∫—Ç–æ", "–∑–∞—á–µ–º", "—Å–∫–æ–ª—å–∫–æ"]
    has_question_word = any(word in question_lower for word in question_words) or "?" in question_lower
    has_multiple_words = len(words) >= 3
    if not (has_question_word and has_multiple_words):
        return False, "–í–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç."
    
    return True, ""

def check_question_similarity(new_question: str, existing_questions: list) -> tuple[bool, str]:
    new_question_lower = new_question.lower().strip()
    for q in existing_questions:
        if not q.get("cancelled", False):
            existing_question = q["question"].lower().strip()
            similarity = difflib.SequenceMatcher(None, new_question_lower, existing_question).ratio()
            if similarity > SIMILARITY_THRESHOLD:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å: '{new_question}' ~ '{q['question']}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f})")
                return True, q["question"]
    return False, ""

def get_remaining_attempts(user_id: int, data: dict) -> int:
    pending_questions = [q for q in data["questions"] if q["user_id"] == user_id and q["status"] == "pending" and not q.get("cancelled", False)]
    return max(0, MAX_PENDING_QUESTIONS - len(pending_questions))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üìã", callback_data="myquestions")],
        [InlineKeyboardButton("–ì–∞–π–¥ üìñ", callback_data="guide")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üëã *–ü—Ä–∏–≤–µ—Ç!* –≠—Ç–æ Q&A-–±–æ—Ç Mortis Play! üòé\n"
        f"–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤ –∏ —Å–∞–π—Ç–∞.\n\n"
        f"üìå *–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}\n"
        f"–ù–æ–≤–∏—á–æ–∫? –ñ–º–∏ *–ì–∞–π–¥* –∏–ª–∏ –ø–∏—à–∏ `/guide`!\n"
        f"–•–æ—á–µ—à—å –≤–æ–ø—Ä–æ—Å? –ü–∏—à–∏ `/ask`! üöÄ",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /guide –æ—Ç user_id {update.effective_user.id}")
    user_id = update.effective_user.id
    reply_to = update.message or update.callback_query.message
    if not reply_to:
        logger.info("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç reply_to")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await reply_to.reply_text("üö® –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üìã", callback_data="myquestions")],
        [InlineKeyboardButton("–ù–∞ —Å–∞–π—Ç üåê", url=QA_WEBSITE)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        f"üìñ *–ì–∞–π–¥ –ø–æ Q&A-–±–æ—Ç—É Mortis Play*\n\n"
        f"üòé *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –í–æ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:\n\n"
        f"1Ô∏è‚É£ **–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å**: –ü–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>` (5‚Äì500 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        f"   *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3. –ü—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
        f"   *–°–æ–≤–µ—Ç*: _–ß—Ç–æ–±—ã –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è–ª–∏ –±—ã—Å—Ç—Ä–æ, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É ‚Äî —Ç–∞–∫ –æ–Ω –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–∞–¥—ë—Ç –Ω–∞ —Å–∞–π—Ç!_\n\n"
        f"2Ô∏è‚É£ **–°—Ç–∞—Ç—É—Å—ã –≤–æ–ø—Ä–æ—Å–∞**:\n"
        f"   ‚Ä¢ *–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è*: –ñ–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º.\n"
        f"   ‚Ä¢ *–ü—Ä–∏–Ω—è—Ç*: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE}) –∑–∞ 1‚Äì48 —á.\n"
        f"   ‚Ä¢ *–û—Ç–∫–ª–æ–Ω—ë–Ω*: –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (—Å –ø—Ä–∏—á–∏–Ω–æ–π).\n"
        f"   ‚Ä¢ *–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω*: –£–¥–∞–ª—ë–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n\n"
        f"3Ô∏è‚É£ **–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤**:\n"
        f"   ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º Mortis Play (–∏–≥—Ä—ã, —Å—Ç—Ä–∏–º—ã, –∫–æ–Ω—Ç–µ–Ω—Ç).\n"
        f"   ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã: —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Ä–µ–∫–ª–∞–º–∞, –æ—Ñ—Ñ—Ç–æ–ø, –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ, –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –±–æ—Ç–æ–≤.\n"
        f"   ‚Ä¢ –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–ª–∏ –Ω–µ—É–º–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –≤–∫–ª—é—á–∞—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã.\n\n"
        f"4Ô∏è‚É£ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**: –ù–∞–∂–º–∏ *–£–≤–µ–¥–æ–º–∏—Ç—å üîî* –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
        f"5Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä—å –≤–æ–ø—Ä–æ—Å—ã**: –ü–∏—à–∏ `/myquestions`.\n\n"
        f"üìå *–ü—Ä–æ–±–ª–µ–º—ã?* –ü–∏—à–∏ –∞–¥–º–∏–Ω—É @dimap7221.\n"
        f"üöÄ *–ì–æ—Ç–æ–≤?* –ñ–º–∏ `/ask`!"
    )
    try:
        await reply_to.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        logger.info(f"–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∞–π–¥–∞: {e}")
        text_plain = text.replace("*", "").replace("_", "").replace("[—Å–∞–π—Ç–µ](https://mortisplay.ru/qa.html)", f"—Å–∞–π—Ç–µ {QA_WEBSITE}")
        await reply_to.reply_text(text_plain, reply_markup=reply_markup, parse_mode=None)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user_id = update.message.from_user.id
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    remaining_attempts = get_remaining_attempts(user_id, data)
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="ask")],
        [InlineKeyboardButton("–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üìã", callback_data="myquestions")],
        [InlineKeyboardButton("–ì–∞–π–¥ üìñ", callback_data="guide")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        f"üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø Q&A-–±–æ—Ç Mortis Play üòé\n"
        f"üìå *–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}\n\n"
        f"üìã *–ö–æ–º–∞–Ω–¥—ã*:\n"
        f"‚Ä¢ `/start` ‚Äî –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        f"‚Ä¢ `/guide` ‚Äî –ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\n"
        f"‚Ä¢ `/ask <–≤–æ–ø—Ä–æ—Å>` ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        f"‚Ä¢ `/myquestions` ‚Äî –¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"‚Ä¢ `/help` ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        f"‚Ä¢ `/list` ‚Äî –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/clear` ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/delete <id>` ‚Äî –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/edit <id> <–≤–æ–ø—Ä–æ—Å>` ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>` ‚Äî –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/approve <id> <–æ—Ç–≤–µ—Ç>` ‚Äî –ü—Ä–∏–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/approve_all <id1,id2,...> <–æ—Ç–≤–µ—Ç>` ‚Äî –ü—Ä–∏–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/reject <id> <–ø—Ä–∏—á–∏–Ω–∞>` ‚Äî –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)\n"
        f"‚Ä¢ `/reject_all <id1,id2,...> <–ø—Ä–∏—á–∏–Ω–∞>` ‚Äî –û—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∞–¥–º–∏–Ω)\n\n"
        f"üì¢ –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º Mortis Play. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ –∏ –æ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –±–æ—Ç–æ–≤!\n"
        f"–ù–æ–≤–∏—á–æ–∫? –ñ–º–∏ *–ì–∞–π–¥* –∏–ª–∏ –ø–∏—à–∏ `/guide`! üöÄ"
    )
    try:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /help: {e}")
        text_plain = text.replace("*", "").replace("[—Å–∞–π—Ç–µ](https://mortisplay.ru/qa.html)", f"—Å–∞–π—Ç–µ {QA_WEBSITE}")
        await update.message.reply_text(text_plain, reply_markup=reply_markup, parse_mode=None)

async def list_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /list –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /list –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    active_questions = [q for q in data["questions"] if not q.get("cancelled", False)]
    if not active_questions:
        await update.message.reply_text("üì≠ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*!", parse_mode="Markdown")
        logger.info("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç")
        return

    response = "*üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*:\n\n"
    for q in active_questions:
        status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
        escaped_question = escape_markdown(q["question"], version=2)
        escaped_username = escape_markdown(q["username"], version=2)
        cancel_reason = f"\n**–ü—Ä–∏—á–∏–Ω–∞**: *{escape_markdown(q['cancel_reason'], version=2)}*" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
        reject_reason = f"\n**–ü—Ä–∏—á–∏–Ω–∞**: *{escape_markdown(q['reject_reason'], version=2)}*" if q.get("reject_reason") and q["status"] == "rejected" else ""
        response += f"**ID**: `{q['id']}`\n**–û—Ç**: @{escaped_username}\n**–í–æ–ø—Ä–æ—Å**: *{escaped_question}*\n**–°—Ç–∞—Ç—É—Å**: `{status}`{cancel_reason}{reject_reason}\n\n"

    try:
        await update.message.reply_text(response, parse_mode="MarkdownV2")
        logger.info(f"–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(active_questions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        plain_response = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"
        for q in active_questions:
            status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
            cancel_reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {q['cancel_reason']}" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
            reject_reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {q['reject_reason']}" if q.get("reject_reason") and q["status"] == "rejected" else ""
            plain_response += f"ID: {q['id']}\n–û—Ç: @{q['username']}\n–í–æ–ø—Ä–æ—Å: {q['question']}\n–°—Ç–∞—Ç—É—Å: {status}{cancel_reason}{reject_reason}\n\n"
        await update.message.reply_text(plain_response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ plain-text —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ MarkdownV2")

async def my_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /myquestions –æ—Ç user_id {update.effective_user.id}")
    user_id = update.effective_user.id
    reply_to = update.message or update.callback_query.message
    if not reply_to:
        logger.info("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç reply_to")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await reply_to.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    user_questions = [q for q in data["questions"] if q["user_id"] == user_id and not q.get("cancelled", False)]
    remaining_attempts = get_remaining_attempts(user_id, data)
    if not user_questions:
        await reply_to.reply_text(
            f"üì≠ *–¢—ã –Ω–µ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤*! *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3.\n"
            f"–ü–∏—à–∏ `/ask` –∏–ª–∏ `/guide`! üöÄ",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç")
        return

    response = f"*üìã –¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã* (*–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3):\n\n"
    for q in user_questions:
        status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
        escaped_question = escape_markdown(q["question"], version=2)
        escaped_answer = escape_markdown(q["answer"], version=2) if q["status"] == "approved" and "answer" in q else ""
        answer = f"\n**–û—Ç–≤–µ—Ç**: *{escaped_answer}*" if q["status"] == "approved" and "answer" in q else ""
        reject_reason = f"\n**–ü—Ä–∏—á–∏–Ω–∞**: *{escape_markdown(q['reject_reason'], version=2)}*" if q.get("reject_reason") and q["status"] == "rejected" else ""
        cancel_reason = f"\n**–ü—Ä–∏—á–∏–Ω–∞**: *{escape_markdown(q['cancel_reason'], version=2)}*" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
        response += f"**ID**: `{q['id']}`\n**–í–æ–ø—Ä–æ—Å**: *{escaped_question}*\n**–°—Ç–∞—Ç—É—Å**: `{status}`{answer}{reject_reason}{cancel_reason}\n\n"

    try:
        await reply_to.reply_text(response, parse_mode="MarkdownV2")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: {len(user_questions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        plain_response = f"üìã –¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã (–ü–æ–ø—ã—Ç–æ–∫: {remaining_attempts}/3):\n\n"
        for q in user_questions:
            status = STATUS_TRANSLATIONS.get(q["status"], q["status"])
            answer = f"\n–û—Ç–≤–µ—Ç: {q['answer']}" if q["status"] == "approved" and "answer" in q else ""
            reject_reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {q['reject_reason']}" if q.get("reject_reason") and q["status"] == "rejected" else ""
            cancel_reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {q['cancel_reason']}" if q.get("cancel_reason") and q["status"] == "cancelled" else ""
            plain_response += f"ID: {q['id']}\n–í–æ–ø—Ä–æ—Å: {q['question']}\n–°—Ç–∞—Ç—É—Å: {status}{answer}{reject_reason}{cancel_reason}\n\n"
        await reply_to.reply_text(plain_response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ plain-text —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ MarkdownV2")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /ask –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.chat.type != "private":
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!", parse_mode="Markdown")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /ask –≤ —á–∞—Ç–µ {update.message.chat.type} –æ—Ç user_id {update.effective_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    user = update.message.from_user
    user_id = user.id
    username = user.username or "–ê–Ω–æ–Ω–∏–º"
    question = " ".join(context.args) if context.args else update.message.text.split("/ask", 1)[-1].strip()
    question_hash = get_question_hash(question)

    if not question:
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"‚ùì –ù–∞–ø–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
            f"üìå *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3",
            parse_mode="Markdown"
        )
        return

    is_valid, reason = check_question_meaning(question)
    if not is_valid:
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω: {reason} üòø\n"
            f"üìå *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –æ—Ç user_id {user_id}: {reason} ({question})")
        return

    current_time = time.time()
    if user_id in spam_protection and current_time - spam_protection[user_id]["last_ask_time"] < 60:
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"‚è≥ *–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!* –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É.\n"
            f"üìå *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3",
            parse_mode="Markdown"
        )
        logger.info(f"–°–ø–∞–º-–∞—Ç–∞–∫–∞ –æ—Ç user_id {user_id}: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        return

    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    if question_hash in question_hashes.get(user_id, []):
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"üîÅ *–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–¥–∞–Ω!* üò∫\n"
            f"üìå *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3",
            parse_mode="Markdown"
        )
        return

    is_similar, similar_question = check_question_similarity(question, data["questions"])
    if is_similar:
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"‚ö†Ô∏è *–ü–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å*: *{escape_markdown(similar_question, version=2)}*\n"
            f"üìå *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3",
            parse_mode="MarkdownV2"
        )
        return

    pending_questions = [q for q in data["questions"] if q["user_id"] == user_id and q["status"] == "pending" and not q.get("cancelled", False)]
    if len(pending_questions) >= MAX_PENDING_QUESTIONS:
        await update.message.reply_text(
            f"‚ö†Ô∏è *–õ–∏–º–∏—Ç {MAX_PENDING_QUESTIONS} –≤–æ–ø—Ä–æ—Å–∞!* –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide`!",
            parse_mode="Markdown"
        )
        return

    if len(question) < 5 or len(question) > 500:
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"üìè –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5‚Äì500 —Å–∏–º–≤–æ–ª–æ–≤!\n"
            f"üìå *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3",
            parse_mode="Markdown"
        )
        return

    if check_blacklist(question):
        remaining_attempts = get_remaining_attempts(user_id, data)
        await update.message.reply_text(
            f"üö´ –í–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç *–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞*!\n"
            f"üìå *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3",
            parse_mode="Markdown"
        )
        return

    question_id = len(data["questions"]) + 1
    data["questions"].append({
        "id": question_id,
        "user_id": user_id,
        "username": username,
        "question": question,
        "status": "pending",
        "notify": False,
        "cancelled": False,
        "cancel_reason": "",
        "reject_reason": ""
    })

    try:
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            updated_data = json.load(f)
        if not any(q["id"] == question_id for q in updated_data["questions"]):
            raise IOError("–í–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ questions.json")
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏/–ø—Ä–æ–≤–µ—Ä–∫–∏ {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    if user_id not in question_hashes:
        question_hashes[user_id] = []
    question_hashes[user_id].append(question_hash)
    spam_protection[user_id] = {"last_ask_time": current_time, "last_question": question}

    remaining_attempts = get_remaining_attempts(user_id, updated_data)
    keyboard = [[InlineKeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å üîî", callback_data=f"notify_{question_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"‚úÖ *–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üò∏ –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE})\n"
        f"üìå *–ü–æ–ø—ã—Ç–æ–∫*: {remaining_attempts}/3",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"*üîî –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å* \\(ID: `{question_id}`\\)\n"
             f"**–û—Ç**: @{escape_markdown(username, version=2)}\n"
             f"**–í–æ–ø—Ä–æ—Å**: *{escape_markdown(question, version=2)}*\n"
             f"‚Ä¢ `/approve {question_id} <–æ—Ç–≤–µ—Ç>`\n"
             f"‚Ä¢ `/reject {question_id} <–ø—Ä–∏—á–∏–Ω–∞>`\n"
             f"‚Ä¢ `/cancel {question_id} <–ø—Ä–∏—á–∏–Ω–∞>`",
        parse_mode="MarkdownV2"
    )

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /approve –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /approve –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID –∏ –æ—Ç–≤–µ—Ç: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –æ—Ç–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        answer = " ".join(args[1:])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and q["status"] == "pending" and not q.get("cancelled", False):
                q["status"] = "approved"
                q["answer"] = answer
                q["published"] = True
                notify_button = []
                if not q["notify"]:
                    notify_button = [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî", callback_data=f"send_notify_approved_{question_id}")]]
                reply_markup = InlineKeyboardMarkup(notify_button)
                await update.message.reply_text(
                    f"‚úÖ –í–æ–ø—Ä–æ—Å `{question_id}` *–ø—Ä–∏–Ω—è—Ç*!\n"
                    f"**–û—Ç–≤–µ—Ç**: *{answer}*\n"
                    f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE})",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                if q["notify"]:
                    try:
                        escaped_answer = escape_markdown(answer, version=2)
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚úÖ *–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üòé\n"
                                 f"**–û—Ç–≤–µ—Ç**: *{escaped_answer}*\n"
                                 f"–°–º–æ—Ç—Ä–∏ –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE})",
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! üòé\n"
                                 f"–û—Ç–≤–µ—Ç: {answer}\n"
                                 f"–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∞–π—Ç–µ: {QA_WEBSITE}",
                            parse_mode=None
                        )
                break
        else:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –ø—Ä–∏–Ω—è—Ç, –æ—Ç–≤–µ—Ç: {answer}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/approve <id> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def approve_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /approve_all –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /approve_all –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏ –æ—Ç–≤–µ—Ç: `/approve_all <id1,id2,...> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve_all: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –æ—Ç–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_ids = [int(x) for x in args[0].split(",")]
        answer = " ".join(args[1:])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        processed_ids = []
        failed_ids = []
        for question_id in question_ids:
            for q in data["questions"]:
                if q["id"] == question_id and q["status"] == "pending" and not q.get("cancelled", False):
                    q["status"] = "approved"
                    q["answer"] = answer
                    q["published"] = True
                    processed_ids.append(question_id)
                    if q["notify"]:
                        try:
                            escaped_answer = escape_markdown(answer, version=2)
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚úÖ *–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üòé\n"
                                     f"**–û—Ç–≤–µ—Ç**: *{escaped_answer}*\n"
                                     f"–°–º–æ—Ç—Ä–∏ –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE})",
                                parse_mode="MarkdownV2"
                            )
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! üòé\n"
                                     f"–û—Ç–≤–µ—Ç: {answer}\n"
                                     f"–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∞–π—Ç–µ: {QA_WEBSITE}",
                                parse_mode=None
                            )
                    break
            else:
                failed_ids.append(question_id)

        if not processed_ids:
            await update.message.reply_text(
                f"‚ùå –í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ ID ({', '.join(map(str, question_ids))}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å—ã ID {', '.join(map(str, question_ids))} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        response = f"‚úÖ –í–æ–ø—Ä–æ—Å—ã `{', '.join(map(str, processed_ids))}` *–ø—Ä–∏–Ω—è—Ç—ã*!\n**–û—Ç–≤–µ—Ç**: *{answer}*\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE})"
        if failed_ids:
            response += f"\n‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ID: `{', '.join(map(str, failed_ids))}` (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã)"
        notify_buttons = [[InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî –¥–ª—è ID {qid}", callback_data=f"send_notify_approved_{qid}")]
                         for qid in processed_ids if any(q["id"] == qid and not q["notify"] for q in data["questions"])]
        reply_markup = InlineKeyboardMarkup(notify_buttons) if notify_buttons else None
        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="Markdown")
        logger.info(f"–í–æ–ø—Ä–æ—Å—ã ID {', '.join(map(str, processed_ids))} –ø—Ä–∏–Ω—è—Ç—ã, –æ—Ç–≤–µ—Ç: {answer}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏: `/approve_all <id1,id2,...> <–æ—Ç–≤–µ—Ç>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /approve_all: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reject –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /reject –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID –∏ –ø—Ä–∏—á–∏–Ω—É: `/reject <id> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        reject_reason = " ".join(args[1:])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and q["status"] == "pending" and not q.get("cancelled", False):
                q["status"] = "rejected"
                q["reject_reason"] = reject_reason
                notify_button = []
                if not q["notify"]:
                    notify_button = [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî", callback_data=f"send_notify_rejected_{question_id}")]]
                reply_markup = InlineKeyboardMarkup(notify_button)
                await update.message.reply_text(
                    f"‚ùå –í–æ–ø—Ä–æ—Å `{question_id}` *–æ—Ç–∫–ª–æ–Ω—ë–Ω*!\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞**: *{reject_reason}*",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                if q["notify"]:
                    try:
                        escaped_reason = escape_markdown(reject_reason, version=2)
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚ùå *–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω!* üòï\n"
                                 f"**–ü—Ä–∏—á–∏–Ω–∞**: *{escaped_reason}*\n"
                                 f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω! üòï\n"
                                 f"–ü—Ä–∏—á–∏–Ω–∞: {reject_reason}\n"
                                 f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /guide",
                            parse_mode=None
                        )
                break
        else:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø—Ä–∏—á–∏–Ω–∞: {reject_reason}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/reject <id> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def reject_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reject_all –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /reject_all –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏ –ø—Ä–∏—á–∏–Ω—É: `/reject_all <id1,id2,...> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject_all: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_ids = [int(x) for x in args[0].split(",")]
        reject_reason = " ".join(args[1:])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        processed_ids = []
        failed_ids = []
        for question_id in question_ids:
            for q in data["questions"]:
                if q["id"] == question_id and q["status"] == "pending" and not q.get("cancelled", False):
                    q["status"] = "rejected"
                    q["reject_reason"] = reject_reason
                    processed_ids.append(question_id)
                    if q["notify"]:
                        try:
                            escaped_reason = escape_markdown(reject_reason, version=2)
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚ùå *–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω!* üòï\n"
                                     f"**–ü—Ä–∏—á–∏–Ω–∞**: *{escaped_reason}*\n"
                                     f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                                parse_mode="MarkdownV2"
                            )
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω! üòï\n"
                                     f"–ü—Ä–∏—á–∏–Ω–∞: {reject_reason}\n"
                                     f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /guide",
                                parse_mode=None
                            )
                    break
            else:
                failed_ids.append(question_id)

        if not processed_ids:
            await update.message.reply_text(
                f"‚ùå –í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ ID ({', '.join(map(str, question_ids))}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å—ã ID {', '.join(map(str, question_ids))} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        response = f"‚ùå –í–æ–ø—Ä–æ—Å—ã `{', '.join(map(str, processed_ids))}` *–æ—Ç–∫–ª–æ–Ω–µ–Ω—ã*!\n**–ü—Ä–∏—á–∏–Ω–∞**: *{reject_reason}*"
        if failed_ids:
            response += f"\n‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ID: `{', '.join(map(str, failed_ids))}` (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã)"
        notify_buttons = [[InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî –¥–ª—è ID {qid}", callback_data=f"send_notify_rejected_{qid}")]
                         for qid in processed_ids if any(q["id"] == qid and not q["notify"] for q in data["questions"])]
        reply_markup = InlineKeyboardMarkup(notify_buttons) if notify_buttons else None
        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="Markdown")
        logger.info(f"–í–æ–ø—Ä–æ—Å—ã ID {', '.join(map(str, processed_ids))} –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã, –ø—Ä–∏—á–∏–Ω–∞: {reject_reason}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏: `/reject_all <id1,id2,...> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /reject_all: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /cancel –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID –∏ –ø—Ä–∏—á–∏–Ω—É: `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /cancel: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        cancel_reason = " ".join(args[1:])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and not q.get("cancelled", False):
                q["status"] = "cancelled"
                q["cancelled"] = True
                q["cancel_reason"] = cancel_reason
                notify_button = []
                if not q["notify"]:
                    notify_button = [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî", callback_data=f"send_notify_cancelled_{question_id}")]]
                reply_markup = InlineKeyboardMarkup(notify_button)
                await update.message.reply_text(
                    f"‚ùå –í–æ–ø—Ä–æ—Å `{question_id}` *–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω*!\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞**: *{cancel_reason}*",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                if q["notify"]:
                    try:
                        escaped_reason = escape_markdown(cancel_reason, version=2)
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚ùå *–í–æ–ø—Ä–æ—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!* üòø\n"
                                 f"**–ü—Ä–∏—á–∏–Ω–∞**: *{escaped_reason}*\n"
                                 f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {q['user_id']}: {e}")
                        await context.bot.send_message(
                            chat_id=q["user_id"],
                            text=f"‚ùå –í–æ–ø—Ä–æ—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω! üòø\n"
                                 f"–ü—Ä–∏—á–∏–Ω–∞: {cancel_reason}\n"
                                 f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /guide",
                            parse_mode=None
                        )
                break
        else:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω, –ø—Ä–∏—á–∏–Ω–∞: {cancel_reason}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/cancel <id> <–ø—Ä–∏—á–∏–Ω–∞>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /cancel: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /delete –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /delete –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    args = context.args
    if not args:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID: `/delete <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /delete: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        original_length = len(data["questions"])
        data["questions"] = [q for q in data["questions"] if q["id"] != question_id]
        if len(data["questions"]) == original_length:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"üóëÔ∏è –í–æ–ø—Ä–æ—Å `{question_id}` *—É–¥–∞–ª—ë–Ω*!",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} —É–¥–∞–ª—ë–Ω")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/delete <id>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /delete: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /clear –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /clear –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    try:
        data = {"questions": []}
        with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
        return

    await update.message.reply_text(
        f"üóëÔ∏è *–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—á–∏—â–µ–Ω—ã*!",
        parse_mode="Markdown"
    )
    logger.info("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—á–∏—â–µ–Ω—ã")

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit –æ—Ç user_id {update.effective_user.id}")
    if not update.message or not update.message.text:
        logger.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω* –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üòé", parse_mode="Markdown")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /edit –æ—Ç user_id {update.message.from_user.id}")
        return
    update_id = update.update_id
    if update_id in processed_updates:
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç update_id {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_updates.add(update_id)

    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∂–∏ ID –∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: `/edit <id> <–≤–æ–ø—Ä–æ—Å>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")
        return

    try:
        question_id = int(args[0])
        new_question = " ".join(args[1:])
        try:
            with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        for q in data["questions"]:
            if q["id"] == question_id and not q.get("cancelled", False):
                old_question = q["question"]
                q["question"] = new_question
                break
        else:
            await update.message.reply_text(
                f"‚ùå –í–æ–ø—Ä–æ—Å ID `{question_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        try:
            with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
            await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

        await update.message.reply_text(
            f"‚úèÔ∏è –í–æ–ø—Ä–æ—Å `{question_id}` *–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω*!\n"
            f"**–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å**: *{new_question}*",
            parse_mode="Markdown"
        )
        logger.info(f"–í–æ–ø—Ä–æ—Å ID {question_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω: {old_question} -> {new_question}")
    except ValueError:
        await update.message.reply_text(
            f"‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: `/edit <id> <–≤–æ–ø—Ä–æ—Å>`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    callback_data = query.data
    logger.info(f"Callback {callback_data} –æ—Ç user_id {user_id}")

    if callback_data.startswith("notify_"):
        try:
            question_id = int(callback_data.split("_")[1])
            try:
                with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except (json.JSONDecodeError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
                await query.message.reply_text("üö® –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
                return

            for q in data["questions"]:
                if q["id"] == question_id and q["user_id"] == user_id and not q.get("cancelled", False):
                    q["notify"] = True
                    break
            else:
                await query.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è user_id {user_id}")
                return

            try:
                with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            except IOError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {QUESTIONS_FILE}: {e}")
                await query.message.reply_text("üö® –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
                return

            await query.message.edit_text(
                f"‚úÖ *–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üò∏ –¢—ã –±—É–¥–µ—à—å —É–≤–µ–¥–æ–º–ª—ë–Ω.\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                parse_mode="Markdown"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ notify callback: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ {callback_data}")
            await query.message.reply_text("üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

    elif callback_data.startswith("send_notify_"):
        try:
            action, question_id = callback_data.split("_")[2], int(callback_data.split("_")[3])
            try:
                with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except (json.JSONDecodeError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {QUESTIONS_FILE}: {e}")
                await query.message.reply_text("üö® –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
                return

            for q in data["questions"]:
                if q["id"] == question_id:
                    if action == "approved":
                        try:
                            escaped_answer = escape_markdown(q["answer"], version=2)
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚úÖ *–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!* üòé\n"
                                     f"**–û—Ç–≤–µ—Ç**: *{escaped_answer}*\n"
                                     f"–°–º–æ—Ç—Ä–∏ –Ω–∞ [—Å–∞–π—Ç–µ]({QA_WEBSITE})",
                                parse_mode="MarkdownV2"
                            )
                            await query.message.reply_text(
                                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ `{question_id}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                                parse_mode="Markdown"
                            )
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ ID {question_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {q['user_id']}: {e}")
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! üòé\n"
                                     f"–û—Ç–≤–µ—Ç: {q['answer']}\n"
                                     f"–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∞–π—Ç–µ: {QA_WEBSITE}",
                                parse_mode=None
                            )
                            await query.message.reply_text(
                                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ `{question_id}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ Markdown)!",
                                parse_mode="Markdown"
                            )
                    elif action == "rejected":
                        try:
                            escaped_reason = escape_markdown(q["reject_reason"], version=2)
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚ùå *–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω!* üòï\n"
                                     f"**–ü—Ä–∏—á–∏–Ω–∞**: *{escaped_reason}*\n"
                                     f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                                parse_mode="MarkdownV2"
                            )
                            await query.message.reply_text(
                                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ `{question_id}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                                parse_mode="Markdown"
                            )
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ ID {question_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {q['user_id']}: {e}")
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω! üòï\n"
                                     f"–ü—Ä–∏—á–∏–Ω–∞: {q['reject_reason']}\n"
                                     f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /guide",
                                parse_mode=None
                            )
                            await query.message.reply_text(
                                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ `{question_id}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ Markdown)!",
                                parse_mode="Markdown"
                            )
                    elif action == "cancelled":
                        try:
                            escaped_reason = escape_markdown(q["cancel_reason"], version=2)
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚ùå *–í–æ–ø—Ä–æ—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!* üòø\n"
                                     f"**–ü—Ä–∏—á–∏–Ω–∞**: *{escaped_reason}*\n"
                                     f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `/guide`",
                                parse_mode="MarkdownV2"
                            )
                            await query.message.reply_text(
                                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ `{question_id}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                                parse_mode="Markdown"
                            )
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ ID {question_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {q['user_id']}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {q['user_id']}: {e}")
                            await context.bot.send_message(
                                chat_id=q["user_id"],
                                text=f"‚ùå –í–æ–ø—Ä–æ—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω! üòø\n"
                                     f"–ü—Ä–∏—á–∏–Ω–∞: {q['cancel_reason']}\n"
                                     f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /guide",
                                parse_mode=None
                            )
                            await query.message.reply_text(
                                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ `{question_id}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ Markdown)!",
                                parse_mode="Markdown"
                            )
                    break
            else:
                await query.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                logger.warning(f"–í–æ–ø—Ä–æ—Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ send_notify callback: {e}, callback_data: {callback_data}")
            await query.message.reply_text("üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @dimap7221.", parse_mode="Markdown")
            return

    elif callback_data == "ask":
        await query.message.reply_text(
            f"‚ùì –ù–∞–ø–∏—à–∏ `/ask <–≤–æ–ø—Ä–æ—Å>`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ask –ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?`\n"
            f"–°–º–æ—Ç—Ä–∏ `/guide` –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫!",
            parse_mode="Markdown"
        )

    elif callback_data == "myquestions":
        await my_questions(update, context)

    elif callback_data == "guide":
        await guide(update, context)

async def main_async():
    logger.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")
    try:
        app = Application.builder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("guide", guide))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("list", list_questions))
        app.add_handler(CommandHandler("myquestions", my_questions))
        app.add_handler(CommandHandler("ask", ask))
        app.add_handler(CommandHandler("approve", approve))
        app.add_handler(CommandHandler("approve_all", approve_all))
        app.add_handler(CommandHandler("reject", reject))
        app.add_handler(CommandHandler("reject_all", reject_all))
        app.add_handler(CommandHandler("cancel", cancel))
        app.add_handler(CommandHandler("delete", delete))
        app.add_handler(CommandHandler("clear", clear))
        app.add_handler(CommandHandler("edit", edit))
        app.add_handler(CallbackQueryHandler(button_callback, pattern="^(notify_|send_notify_|ask|myquestions|guide)"))
        await app.initialize()
        await app.start()
        await app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        while True:
            await asyncio.sleep(3600)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    import sys
    asyncio.run(main_async())
